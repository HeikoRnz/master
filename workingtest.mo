within ;
model ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu
extends fmuIcon;
// Model automatically generated by Dymola from FMI model description
public
  type Modelica_Blocks_Interfaces_BooleanInput = Boolean;
  type Modelica_Blocks_Interfaces_BooleanOutput = Boolean;
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
  type Modelica_Blocks_Interfaces_RealVectorInput = Real;
protected
  record 'system_rec'
    constant Modelica.SIunits.AbsolutePressure p_ambient = 101325
                                                                 "Default ambient pressure";
    constant Modelica.SIunits.Temperature T_ambient = 293.15
                                                            "Default ambient temperature";
    constant Modelica.SIunits.Acceleration g = 9.80665
                                                      "Constant gravity acceleration";
    constant Boolean allowFlowReversal = true
                                             "= false to restrict to design flow direction (port_a -> port_b)";
    constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Default formulation of energy balances";
    constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                          "Default formulation of mass balances";
    constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Default formulation of substance balances";
    constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                           "Default formulation of trace substance balances";
    constant Modelica.Fluid.Types.Dynamics momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyState
                                                                                                       "Default formulation of momentum balances, if options available";
    constant Modelica.SIunits.MassFlowRate m_flow_start = 0
                                                           "Default start value for mass flow rates";
    constant Modelica.SIunits.AbsolutePressure p_start = 101325.0
                                                                 "Default start value for pressures";
    constant Modelica.SIunits.Temperature T_start = 293.15
                                                          "Default start value for temperatures";
    constant Boolean use_eps_Re = false
                                       "= true to determine turbulent region automatically using Reynolds number";
    constant Modelica.SIunits.MassFlowRate m_flow_nominal = 1.0
                                                               "Default nominal mass flow rate";
    constant Real eps_m_flow(min = 0.0) = 0.0001
                                                "Regularization of zero flow for |m_flow| < eps_m_flow*m_flow_nominal";
    constant Modelica.SIunits.AbsolutePressure dp_small = 1
                                                           "Default small pressure drop for regularization of laminar and zero flow";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.01
                                                                         "Default small mass flow rate for regularization of laminar and zero flow";
  end 'system_rec';
public
  'system_rec' 'system';
protected
  record watertank_warm_rec
    constant Boolean allowFlowReversal = true
                                             "= false to simplify equations, assuming, but not enforcing, no flow reversal";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                         "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Modelica.SIunits.MassFlowRate m_flow_nominal = 10
                                                              "Nominal mass flow rate";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                          "Small mass flow rate for regularization of zero flow";
    constant Boolean show_T = false
                                   "= true, if actual temperature at port is computed";
    Modelica.SIunits.MassFlowRate m_flow
                                        "Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)";
    constant Modelica.SIunits.PressureDifference dp(displayUnit = "Pa") = 0.0
                                                                             "Pressure difference between port_a and port_b";
    constant Modelica.SIunits.MassFlowRate _m_flow_start = 0
                                                            "Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window";
    constant Modelica.SIunits.PressureDifference _dp_start(displayUnit = "Pa") = 0
                                                                                  "Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window";
    constant Modelica.SIunits.Volume VTan = 6
                                             "Tank volume";
    constant Modelica.SIunits.Length hTan = 2
                                             "Height of tank (without insulation)";
    constant Modelica.SIunits.Length dIns = 0.2
                                               "Thickness of insulation";
    constant Modelica.SIunits.ThermalConductivity kIns = 0.04
                                                             "Specific heat conductivity of insulation";
    constant Integer nSeg(min = 2) = 2
                                      "Number of volume segments";
    constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                      "Formulation of energy balance";
    constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                    "Formulation of mass balance";
    constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                             "Start value of pressure";
    constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Start value of temperature";
    constant Real 'X_start[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Start value of mass fractions m_i/m";
    constant Modelica.SIunits.Time tau = 1
                                          "Time constant for mixing";
    constant Modelica_Blocks_Interfaces_RealOutput Ql_flow = 0.0
                                                                "Heat loss of tank (positive if heat flows from tank to ambient)";
  protected
    record 'heaPorVol[1]_rec'
      Modelica.SIunits.Temperature T(min = 1.0, max = 10000.0)
                                                              "Port temperature";
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate (positive if flowing from outside into the component)";
    end 'heaPorVol[1]_rec';
  public
    'heaPorVol[1]_rec' 'heaPorVol[1]';
  protected
    record 'heaPorVol[2]_rec'
      Modelica.SIunits.Temperature T(min = 1.0, max = 10000.0)
                                                              "Port temperature";
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate (positive if flowing from outside into the component)";
    end 'heaPorVol[2]_rec';
  public
    'heaPorVol[2]_rec' 'heaPorVol[2]';
  protected
    record heaPorSid_rec
      Modelica.SIunits.Temperature T
                                    "Port temperature";
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate (positive if flowing from outside into the component)";
    end heaPorSid_rec;
  public
    heaPorSid_rec heaPorSid;
  protected
    record heaPorTop_rec
      Modelica.SIunits.Temperature T
                                    "Port temperature";
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate (positive if flowing from outside into the component)";
    end heaPorTop_rec;
  public
    heaPorTop_rec heaPorTop;
  protected
    record heaPorBot_rec
      Modelica.SIunits.Temperature T
                                    "Port temperature";
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate (positive if flowing from outside into the component)";
    end heaPorBot_rec;
  public
    heaPorBot_rec heaPorBot;
  protected
    record 'vol[1]_rec'
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                        "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                      "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                           "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                       "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = false
                                                     "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 10.0
                                                                             "Nominal mass flow rate";
      constant Integer nPorts = 3
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                            "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 3.0
                                              "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
    protected
      record 'ports[3]_rec'
        constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.0
                                                                                                                               "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[3]_rec';
    public
      'ports[3]_rec' 'ports[3]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 2986.758
                                                                              "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                          "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                        "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                             "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                         "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 3
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 2986.758
                                                                                              "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record 'ports[3]_rec'
          constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.0
                                                                                                                                 "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[3]_rec';
      public
        'ports[3]_rec' 'ports[3]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        Modelica.SIunits.Energy U(nominal = 100000.0, fixed=false)
                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 2986.758
                                                   "Mass of fluid";
        constant Real m_der(unit = "kg/s") = 0.0
                                                "der(Mass of fluid)";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                            "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 3.0
                                                          "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Real 'ports_H_flow[3]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0) = 0.0;
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal;
    end 'vol[1]_rec';
  public
    'vol[1]_rec' 'vol[1]';
  protected
    record 'vol[2]_rec'
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                        "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                      "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                           "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                       "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = false
                                                     "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 10.0
                                                                             "Nominal mass flow rate";
      constant Integer nPorts = 3
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                            "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 3.0
                                              "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
    protected
      record 'ports[3]_rec'
        constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.0
                                                                                                                               "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[3]_rec';
    public
      'ports[3]_rec' 'ports[3]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 2986.758
                                                                              "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                          "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                        "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                             "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                         "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 3
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 2986.758
                                                                                              "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record 'ports[3]_rec'
          constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.0
                                                                                                                                 "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[3]_rec';
      public
        'ports[3]_rec' 'ports[3]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        Modelica.SIunits.Energy U(nominal = 100000.0, fixed=false)
                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 2986.758
                                                   "Mass of fluid";
        constant Real m_der(unit = "kg/s") = 0.0
                                                "der(Mass of fluid)";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                            "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 3.0
                                                          "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Real 'ports_H_flow[3]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0) = 0.0;
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal;
    end 'vol[2]_rec';
  public
    'vol[2]_rec' 'vol[2]';
  protected
    record sta_default_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end sta_default_rec;
  public
    sta_default_rec sta_default;
    constant Modelica.SIunits.Length hSeg = 1.0
                                               "Height of a tank segment";
    constant Modelica.SIunits.Area ATan = 3.0
                                             "Tank cross-sectional area (without insulation)";
    constant Modelica.SIunits.Length rTan = 0.9772050238058398
                                                              "Tank diameter (without insulation)";
    constant Modelica.SIunits.ThermalConductance conFluSeg = 1.794
                                                                  "Thermal conductance between fluid volumes";
    constant Modelica.SIunits.ThermalConductance conTopSeg = 0.6
                                                                "Thermal conductance from center of top (or bottom) volume through tank insulation at top (or bottom)";
  protected
    record buo_rec
      constant Modelica.SIunits.Volume V = 6.0
                                              "Volume";
      constant Integer nSeg(min = 2) = 2
                                        "Number of volume segments";
      constant Modelica.SIunits.Time tau(min = 0.0) = 1.0
                                                         "Time constant for mixing";
    protected
      record 'heatPort[1]_rec'
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatPort[1]_rec';
    public
      'heatPort[1]_rec' 'heatPort[1]';
    protected
      record 'heatPort[2]_rec'
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatPort[2]_rec';
    public
      'heatPort[2]_rec' 'heatPort[2]';
      Modelica.SIunits.HeatFlowRate 'Q_flow[1]'
                                               "Heat flow rate from segment i+1 to i";
    protected
      record sta_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end sta_default_rec;
    public
      sta_default_rec sta_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
      constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                      "Specific heat capacity";
      constant Real k(unit = "W/K") = 12496595.472
                                                  "Proportionality constant, since we use dT instead of dH";
      Modelica.SIunits.TemperatureDifference 'dT[1]'
                                                    "Temperature difference between adjoining volumes";
    end buo_rec;
  public
    buo_rec buo;
  protected
    record 'conFlu[1]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 1.794
                                                            "Constant thermal conductance of material";
    end 'conFlu[1]_rec';
  public
    'conFlu[1]_rec' 'conFlu[1]';
  protected
    record 'conWal[1]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 1.3497582058741673
                                                                         "Constant thermal conductance of material";
    end 'conWal[1]_rec';
  public
    'conWal[1]_rec' 'conWal[1]';
  protected
    record 'conWal[2]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 1.3497582058741673
                                                                         "Constant thermal conductance of material";
    end 'conWal[2]_rec';
  public
    'conWal[2]_rec' 'conWal[2]';
  protected
    record conTop_rec
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate from port_a -> port_b";
      constant Modelica.SIunits.TemperatureDifference dT = 0.0
                                                              "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 0.6
                                                          "Constant thermal conductance of material";
    end conTop_rec;
  public
    conTop_rec conTop;
  protected
    record conBot_rec
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate from port_a -> port_b";
      constant Modelica.SIunits.TemperatureDifference dT = 0.0
                                                              "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 0.6
                                                          "Constant thermal conductance of material";
    end conBot_rec;
  public
    conBot_rec conBot;
  protected
    record heaFloTop_rec
      constant Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W") = 0.0
                                                                             "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end heaFloTop_rec;
  public
    heaFloTop_rec heaFloTop;
  protected
    record heaFloBot_rec
      constant Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W") = 0.0
                                                                             "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end heaFloBot_rec;
  public
    heaFloBot_rec heaFloBot;
  protected
    record 'heaFloSid[1]_rec'
      Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                              "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end 'heaFloSid[1]_rec';
  public
    'heaFloSid[1]_rec' 'heaFloSid[1]';
  protected
    record 'heaFloSid[2]_rec'
      Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                              "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end 'heaFloSid[2]_rec';
  public
    'heaFloSid[2]_rec' 'heaFloSid[2]';
  protected
    record mul_rec
      constant Integer n1 = 1
                             "dimension of input signal connector 1";
      constant Integer n2 = 2
                             "dimension of input signal connector 2";
      constant Integer n3 = 1
                             "dimension of input signal connector 3";
      constant Modelica_Blocks_Interfaces_RealInput 'u1[1]'(unit = "W") = 0.0
                                                                             "Connector of Real input signals 1";
      Modelica_Blocks_Interfaces_RealInput 'u2[1]'(unit = "W")
                                                              "Connector of Real input signals 2";
      Modelica_Blocks_Interfaces_RealInput 'u2[2]'(unit = "W")
                                                              "Connector of Real input signals 2";
      constant Modelica_Blocks_Interfaces_RealInput 'u3[1]'(unit = "W") = 0.0
                                                                             "Connector of Real input signals 3";
      constant Modelica_Blocks_Interfaces_RealOutput 'y[1]' = 0.0
                                                                 "Connector of Real output signals";
      Modelica_Blocks_Interfaces_RealOutput 'y[2]'
                                                  "Connector of Real output signals";
      Modelica_Blocks_Interfaces_RealOutput 'y[3]'
                                                  "Connector of Real output signals";
      constant Modelica_Blocks_Interfaces_RealOutput 'y[4]' = 0.0
                                                                 "Connector of Real output signals";
    end mul_rec;
  public
    mul_rec mul;
  protected
    record sum1_rec
      constant Integer nin = 4
                              "Number of inputs";
      constant Modelica_Blocks_Interfaces_RealInput 'u[1]' = 0.0
                                                                "Connector of Real input signals";
      Modelica_Blocks_Interfaces_RealInput 'u[2]'
                                                 "Connector of Real input signals";
      Modelica_Blocks_Interfaces_RealInput 'u[3]'
                                                 "Connector of Real input signals";
      constant Modelica_Blocks_Interfaces_RealInput 'u[4]' = 0.0
                                                                "Connector of Real input signals";
      constant Modelica_Blocks_Interfaces_RealOutput y = 0.0
                                                            "Connector of Real output signal";
      constant Real 'k[1]' = 1
                              "Optional: sum coefficients";
      constant Real 'k[2]' = 1
                              "Optional: sum coefficients";
      constant Real 'k[3]' = 1
                              "Optional: sum coefficients";
      constant Real 'k[4]' = 1
                              "Optional: sum coefficients";
    end sum1_rec;
  public
    sum1_rec sum1;
  protected
    record theCol_rec
      constant Integer m(min = 1) = 2
                                     "Number of collected heat flows";
    protected
      record 'port_a[1]_rec'
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end 'port_a[1]_rec';
    public
      'port_a[1]_rec' 'port_a[1]';
    protected
      record 'port_a[2]_rec'
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end 'port_a[2]_rec';
    public
      'port_a[2]_rec' 'port_a[2]';
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end theCol_rec;
  public
    theCol_rec theCol;
  protected
    record 'fluPorVol[1]_rec'
      constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.0
                                                                                                                             "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end 'fluPorVol[1]_rec';
  public
    'fluPorVol[1]_rec' 'fluPorVol[1]';
  protected
    record 'fluPorVol[2]_rec'
      constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.0
                                                                                                                             "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end 'fluPorVol[2]_rec';
  public
    'fluPorVol[2]_rec' 'fluPorVol[2]';
  end watertank_warm_rec;
public
  watertank_warm_rec watertank_warm;
protected
  record immersionHeater_rec
    Modelica_Blocks_Interfaces_RealInput u;
  protected
    record Q_flow_s_rec
      Modelica.SIunits.Temperature T
                                    "Port temperature";
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate (positive if flowing from outside into the component)";
    end Q_flow_s_rec;
  public
    Q_flow_s_rec Q_flow_s;
  protected
    record prescribedHeatFlow_rec
      constant Modelica.SIunits.Temperature T_ref = 293.15
                                                          "Reference temperature";
      constant Modelica.SIunits.LinearTemperatureCoefficient alpha = 0
                                                                      "Temperature coefficient of heat flow rate";
      Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W");
    protected
      record port_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end prescribedHeatFlow_rec;
  public
    prescribedHeatFlow_rec prescribedHeatFlow;
    Modelica_Blocks_Interfaces_RealOutput P_el(unit = "W");
    constant Modelica.SIunits.Power P_el_nom = 20000
                                                    "Nominal electrical power";
    constant Integer n = 4
                          "Quantity of available control steps linear to nominal power (e.g. n=4: 0,25%,50%,75%,100)";
  protected
    record gain_rec
      constant Real k = 20000.0
                               "Gain value multiplied with input signal";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Input signal connector";
      Modelica_Blocks_Interfaces_RealOutput y(unit = "W")
                                                         "Output signal connector";
    end gain_rec;
  public
    gain_rec gain;
  protected
    record nStepsLimiter_rec
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
      constant Real uMax = 1
                            "Upper limits of input signals";
      constant Real uMin = 0
                            "Lower limits of input signals";
      constant Integer n = 4
                            "quantity of steps";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
      Real u_limited;
    end nStepsLimiter_rec;
  public
    nStepsLimiter_rec nStepsLimiter;
    Modelica_Blocks_Interfaces_RealOutput s_u;
  end immersionHeater_rec;
public
  immersionHeater_rec immersionHeater;
protected
  record condensingBoiler_rec
    constant Boolean allowFlowReversal = true
                                             "= false to simplify equations, assuming, but not enforcing, no flow reversal";
  protected
    record port_a_rec
      parameter Real _m_flow_start = 0;
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -0.0, max = 100000.0,start = _m_flow_start, fixed=false)
                                                                                                                                            "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                   "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a annotation(Dialog);
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Modelica.SIunits.MassFlowRate m_flow_nominal = 10
                                                              "Nominal mass flow rate";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                          "Small mass flow rate for regularization of zero flow";
    constant Boolean show_T = false
                                   "= true, if actual temperature at port is computed";
    Modelica.SIunits.MassFlowRate m_flow
                                        "Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)";
    constant Modelica.SIunits.PressureDifference dp(displayUnit = "Pa") = 0.0
                                                                             "Pressure difference between port_a and port_b";
    constant Modelica.SIunits.MassFlowRate _m_flow_start = 0
                                                            "Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window";
    constant Modelica.SIunits.PressureDifference _dp_start(displayUnit = "Pa") = 0
                                                                                  "Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window";
    constant Modelica.SIunits.Volume V = 0.005
                                              "Volume";
    constant Modelica.SIunits.Power P_th_nom = 26000.0
                                                      "Nominal heating power of boiler";
    constant Modelica.SIunits.Power P_th_min = 5200.0
                                                     "Minimal heating power of boiler";
    constant Modelica.SIunits.Power P_el_nom(min = 0.0) = 68
                                                            "Nominal electrical demand of boiler";
    constant Real u_min = 0.3
                             "minimal operating point";
    constant Modelica.SIunits.SpecificEnergy H_i = 50000000.0
                                                             "Specific fuel energy";
    Modelica.SIunits.MassFlowRate gas_m_flow
                                            "fuel mass flow";
    Modelica.SIunits.Power Q_s
                              "Actual heat output";
  protected
    record tableEfficiency_rec
      constant Integer nout = 1
                               "Number of outputs";
      Real u_inBaseUnit(unit = "K") = fmi_Functions.from_degC(u);
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput 'y[1]'
                                                  "Connector of Real output signals";
      constant Boolean tableOnFile = false
                                          "= true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 20.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 1.07
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 25.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 1.062
                                        "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,1]' = 30.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,2]' = 1.05
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,1]' = 35.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,2]' = 1.03
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[5,1]' = 40.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[5,2]' = 1.01
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[6,1]' = 45.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[6,2]' = 0.996
                                        "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[7,1]' = 50.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[7,2]' = 0.98
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[8,1]' = 55.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[8,2]' = 0.964
                                        "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[9,1]' = 60.0
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[9,2]' = 0.958
                                        "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[10,1]' = 65.0
                                        "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[10,2]' = 0.956
                                         "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[11,1]' = 70.0
                                        "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[11,2]' = 0.955
                                         "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Boolean verboseRead = true
                                         "= true, if info message that file is loading is to be printed";
      constant Integer 'columns[1]' = 2
                                       "Columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments
                                                                                                            "Smoothness of table interpolation";
    protected
      record tableID_rec
        Integer id;
      end tableID_rec;
    public
      tableID_rec tableID;
      parameter Real tableOnFileRead(fixed=false)
                                                 "= 1, if table was successfully read from file";
    end tableEfficiency_rec;
  public
    tableEfficiency_rec tableEfficiency;
  protected
    record temperature_rec
    protected
      record port_rec
        constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0) = 0
                                                                                                                       "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                     "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_rec;
    public
      port_rec port;
      Modelica_Blocks_Interfaces_RealOutput T(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature", min = 0.0)
                                                                                                                                 "Temperature in port medium";
    end temperature_rec;
  public
    temperature_rec temperature;
  protected
    record K2degC_rec
      Modelica_Blocks_Interfaces_RealInput Kelvin(unit = "K");
      Real Celsius_inBaseUnit(unit = "K") = fmi_Functions.from_degC(Celsius);
      Modelica_Blocks_Interfaces_RealOutput Celsius;
    end K2degC_rec;
  public
    K2degC_rec K2degC;
  protected
    record volEva_rec
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 100000
                                                                                                                                               "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = true
                                                    "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 10
                                                                           "Nominal mass flow rate";
      constant Integer nPorts = 2
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                            "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 0.005
                                                "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 4.97793
                                                                             "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 100000.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                   "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 100000.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 2
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 4.97793
                                                                                             "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        parameter Modelica.SIunits.Energy _U_start = 416553.1824;
        Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 4.97793
                                                  "Mass of fluid";
        constant Real m_der(unit = "kg/s") = 0.0
                                                "der(Mass of fluid)";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                            "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 0.005
                                                            "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal annotation(Dialog);
    end volEva_rec;
  public
    volEva_rec volEva annotation(Dialog);
    Modelica_Blocks_Interfaces_RealInput u(min = 0.0, max = 1.0)
                                                                "operating points";
    Modelica_Blocks_Interfaces_RealOutput P_el(unit = "W", quantity = "Power")
                                                                              "Electrical power consumed";
    Modelica_Blocks_Interfaces_RealOutput P_gs(unit = "W", quantity = "Power")
                                                                              "Fuel power consumed";
  protected
    record prePow_rec
      constant Modelica.SIunits.Temperature T_ref = 293.15
                                                          "Reference temperature";
      constant Modelica.SIunits.LinearTemperatureCoefficient alpha = 0
                                                                      "Temperature coefficient of heat flow rate";
      Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W");
    protected
      record port_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end prePow_rec;
  public
    prePow_rec prePow;
  end condensingBoiler_rec;
public
  condensingBoiler_rec condensingBoiler annotation(Dialog);
protected
  record expansion_tank_rec
    constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                      "Type of energy balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                    "Type of mass balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                         "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial
                                                                                                     "Type of trace substance balance: dynamic (3 initialization options) or steady state";
    constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                             "Start value of pressure";
    constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Start value of temperature";
    constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                         "Start value of mass fractions m_i/m";
    constant Real mSenFac(min = 1.0) = 1
                                        "Factor for scaling the sensible thermal mass of the volume";
    constant Modelica.SIunits.Volume V_start = 0.01
                                                   "Volume of liquid stored in the vessel at the start of the simulation";
    constant Modelica.SIunits.Pressure p = 100000
                                                 "Constant pressure of the expansion vessel";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
    Modelica.SIunits.Mass m(fixed=false)
                                        "Mass of liquid in the vessel";
  protected
    record state_start_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end state_start_rec;
  public
    state_start_rec state_start;
    constant Modelica.SIunits.Density rho_start = 995.586
                                                         "Density, used to compute start and guess values";
    Modelica.SIunits.Energy H(fixed=false)
                                          "Internal energy of fluid";
  end expansion_tank_rec;
public
  expansion_tank_rec expansion_tank;
protected
  record sum_elec_rec
    constant Integer significantDigits(min = 1) = 3
                                                   "Number of significant digits to be shown in dynamic diagram layer for y";
    Modelica_Blocks_Interfaces_RealVectorInput 'u[1]'(unit = "W");
    Modelica_Blocks_Interfaces_RealVectorInput 'u[2]'(unit = "W");
    Modelica_Blocks_Interfaces_RealVectorInput 'u[3]'(unit = "W");
    Modelica_Blocks_Interfaces_RealVectorInput 'u[4]';
    Modelica_Blocks_Interfaces_RealVectorInput 'u[5]'(unit = "W");
    Modelica_Blocks_Interfaces_RealVectorInput 'u[6]'(unit = "W");
    Modelica_Blocks_Interfaces_RealOutput y;
    constant Real 'k[1]' = 1
                            "Input gains";
    constant Real 'k[2]' = 1
                            "Input gains";
    constant Real 'k[3]' = 1
                            "Input gains";
    constant Real 'k[4]' = 1
                            "Input gains";
    constant Real 'k[5]' = 1
                            "Input gains";
    constant Real 'k[6]' = 1
                            "Input gains";
  end sum_elec_rec;
public
  sum_elec_rec sum_elec;
protected
  record sum_gas_rec
    constant Integer significantDigits(min = 1) = 3
                                                   "Number of significant digits to be shown in dynamic diagram layer for y";
    Modelica_Blocks_Interfaces_RealVectorInput 'u[1]'(unit = "W");
    Modelica_Blocks_Interfaces_RealVectorInput 'u[2]'(unit = "W");
    Modelica_Blocks_Interfaces_RealOutput y;
    constant Real 'k[1]' = 1
                            "Input gains";
    constant Real 'k[2]' = 1
                            "Input gains";
  end sum_gas_rec;
public
  sum_gas_rec sum_gas;
protected
  record cHP_rec
    constant Boolean allowFlowReversal = true
                                             "= false to simplify equations, assuming, but not enforcing, no flow reversal";
  protected
    record port_a_rec
      parameter Real _m_flow_start = 0;
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -0.0, max = 100000.0,start = _m_flow_start, fixed=false)
                                                                                                                                            "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                   "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a annotation(Dialog);
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Modelica.SIunits.MassFlowRate m_flow_nominal = 10
                                                              "Nominal mass flow rate";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                          "Small mass flow rate for regularization of zero flow";
    constant Boolean show_T = false
                                   "= true, if actual temperature at port is computed";
    Modelica.SIunits.MassFlowRate m_flow
                                        "Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)";
    constant Modelica.SIunits.PressureDifference dp(displayUnit = "Pa") = 0.0
                                                                             "Pressure difference between port_a and port_b";
    constant Modelica.SIunits.MassFlowRate _m_flow_start = 0
                                                            "Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window";
    constant Modelica.SIunits.PressureDifference _dp_start(displayUnit = "Pa") = 0
                                                                                  "Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window";
    constant Modelica.SIunits.Power P_el_on = 150
                                                 "Electric utility consumption";
    constant Modelica.SIunits.MassFlowRate mass_flow_nom = 10
                                                             "nominal mass flow";
    constant Modelica.SIunits.Power P_el_nom = 6000.0
                                                     "Nominal electrical power of boiler";
    constant Modelica.SIunits.Power P_gs_nom = 22200.0
                                                      "nominal gas consumption";
    constant Real u_min = 0.5
                             "Minimum operation point";
    constant Modelica.SIunits.Temperature T_start = 293.15;
    constant Modelica.SIunits.Temperature T_min = 303.15
                                                        "Min temperature";
    constant Modelica.SIunits.Temperature T_max = 338.15
                                                        "Max temperature";
    constant Modelica.SIunits.Time tau = 150
                                            "Delay parameter of the PT1";
    constant Modelica.SIunits.SpecificEnergy H_i = 50000000.0
                                                             "fuel energy value (Heizwert)";
    parameter Modelica.SIunits.Power _Q_s_start = 0.0;
    Modelica.SIunits.Power Q_s(start = _Q_s_start, fixed=true)
                                                              "Actual heat output";
    Modelica.SIunits.MassFlowRate mass_flow_gs
                                              "gas mass flow";
    Real eta
            "total efficiency";
  protected
    record temperature_rec
    protected
      record port_rec
        constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0) = 0
                                                                                                                       "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                     "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_rec;
    public
      port_rec port;
      Modelica_Blocks_Interfaces_RealOutput T(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature", min = 0.0)
                                                                                                                                 "Temperature in port medium";
    end temperature_rec;
  public
    temperature_rec temperature;
  protected
    record K2degC_rec
      Modelica_Blocks_Interfaces_RealInput Kelvin(unit = "K");
      Real Celsius_inBaseUnit(unit = "K") = fmi_Functions.from_degC(Celsius);
      Modelica_Blocks_Interfaces_RealOutput Celsius;
    end K2degC_rec;
  public
    K2degC_rec K2degC;
  protected
    record vol_rec
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 100000
                                                                                                                                               "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = true
                                                    "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 10
                                                                           "Nominal mass flow rate";
      constant Integer nPorts = 2
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                            "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 0.01
                                               "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 9.95586
                                                                             "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 100000.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                   "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 100000.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 2
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 9.95586
                                                                                             "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        parameter Modelica.SIunits.Energy _U_start = 833106.3648;
        Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 9.95586
                                                  "Mass of fluid";
        constant Real m_der(unit = "kg/s") = 0.0
                                                "der(Mass of fluid)";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                            "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 0.01
                                                           "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal annotation(Dialog);
    end vol_rec;
  public
    vol_rec vol annotation(Dialog);
    Modelica_Blocks_Interfaces_RealInput u(min = 0.0, max = 1.0);
    Modelica_Blocks_Interfaces_RealOutput P_el(unit = "W", quantity = "Power")
                                                                              "Electrical power consumed";
    Modelica_Blocks_Interfaces_RealOutput P_gs(unit = "W", quantity = "Power")
                                                                              "Fuel power consumed";
    Modelica_Blocks_Interfaces_RealOutput P_th(unit = "W", quantity = "Power")
                                                                              "thermal power consumed";
  protected
    record Tableefficency_P_th_rec
      Modelica_Blocks_Interfaces_RealInput u1
                                             "Connector of Real input signal 1";
      Real u2_inBaseUnit(unit = "K") = fmi_Functions.from_degC(u2);
      Modelica_Blocks_Interfaces_RealInput u2
                                             "Connector of Real input signal 2";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
      constant Boolean tableOnFile = false
                                          "= true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0
                                    "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[1,2]' = 30
                                     "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[1,3]' = 40
                                     "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[1,4]' = 50
                                     "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[1,5]' = 60
                                     "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[1,6]' = 65
                                     "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[2,1]' = 0.5
                                      "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[2,2]' = 0.4
                                      "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[2,3]' = 0.33
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[2,4]' = 0.29
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[2,5]' = 0.24
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[2,6]' = 0.2
                                      "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[3,1]' = 0.75
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[3,2]' = 0.54
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[3,3]' = 0.47
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[3,4]' = 0.43
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[3,5]' = 0.38
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[3,6]' = 0.34
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[4,1]' = 1.0
                                      "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[4,2]' = 0.68
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[4,3]' = 0.61
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[4,4]' = 0.57
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[4,5]' = 0.52
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Real 'table[4,6]' = 0.48
                                       "Table matrix (grid u1 = first column, grid u2 = first row; e.g., table=[0,0;0,1])";
      constant Boolean verboseRead = true
                                         "= true, if info message that file is loading is to be printed";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments
                                                                                                            "Smoothness of table interpolation";
    protected
      record tableID_rec
        Integer id;
      end tableID_rec;
    public
      tableID_rec tableID;
      parameter Real tableOnFileRead(fixed=false)
                                                 "= 1, if table was successfully read from file";
    end Tableefficency_P_th_rec;
  public
    Tableefficency_P_th_rec Tableefficency_P_th;
  protected
    record zeroLimiter1_rec
      constant Real u_max = 1
                             "Upper limits of input signals";
      constant Real u_min = 0.5
                               "Lower limits of input signals - u<u_min is zero";
      constant Real u_0 = 0
                           "output value for u<u_min";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
    end zeroLimiter1_rec;
  public
    zeroLimiter1_rec zeroLimiter1;
  protected
    record prePow_rec
      constant Modelica.SIunits.Temperature T_ref = 293.15
                                                          "Reference temperature";
      constant Modelica.SIunits.LinearTemperatureCoefficient alpha = 0
                                                                      "Temperature coefficient of heat flow rate";
      Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W");
    protected
      record port_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end prePow_rec;
  public
    prePow_rec prePow;
  protected
    record Tableefficency_P_el_rec
      constant Integer nout = 1
                               "Number of outputs";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput 'y[1]'
                                                  "Connector of Real output signals";
      constant Boolean tableOnFile = false
                                          "= true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0.0
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 0.0
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 0.5
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 0.14
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,1]' = 0.75
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,2]' = 0.21
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,1]' = 1.0
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,2]' = 0.29
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Boolean verboseRead = true
                                         "= true, if info message that file is loading is to be printed";
      constant Integer 'columns[1]' = 2
                                       "Columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments
                                                                                                            "Smoothness of table interpolation";
    protected
      record tableID_rec
        Integer id;
      end tableID_rec;
    public
      tableID_rec tableID;
      parameter Real tableOnFileRead(fixed=false)
                                                 "= 1, if table was successfully read from file";
    end Tableefficency_P_el_rec;
  public
    Tableefficency_P_el_rec Tableefficency_P_el;
  protected
    record Tableefficency_P_gs_rec
      constant Integer nout = 1
                               "Number of outputs";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput 'y[1]'
                                                  "Connector of Real output signals";
      constant Boolean tableOnFile = false
                                          "= true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0.0
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 0.0
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 0.5
                                      "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 0.61
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,1]' = 0.75
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,2]' = 0.79
                                       "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,1]' = 1
                                    "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,2]' = 1
                                    "Table matrix (grid = first column; e.g., table=[0,2])";
      constant Boolean verboseRead = true
                                         "= true, if info message that file is loading is to be printed";
      constant Integer 'columns[1]' = 2
                                       "Columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments
                                                                                                            "Smoothness of table interpolation";
    protected
      record tableID_rec
        Integer id;
      end tableID_rec;
    public
      tableID_rec tableID;
      parameter Real tableOnFileRead(fixed=false)
                                                 "= 1, if table was successfully read from file";
    end Tableefficency_P_gs_rec;
  public
    Tableefficency_P_gs_rec Tableefficency_P_gs;
  end cHP_rec;
public
  cHP_rec cHP annotation(Dialog);
protected
  record massflow_from_watertank_warm_rec
    constant Boolean allowFlowReversal = true
                                             "= false to simplify equations, assuming, but not enforcing, no flow reversal";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -1E+60, max = 100000.0)
                                                                                                           "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 1E+60)
                                                                                                           "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 0
                                                                        "Nominal mass flow rate, used for regularization near zero flow";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0
                                                                      "For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required)";
    Modelica_Blocks_Interfaces_RealOutput m_flow(unit = "kg/s", quantity = "MassFlowRate")
                                                                                          "Mass flow rate from port_a to port_b";
  end massflow_from_watertank_warm_rec;
public
  massflow_from_watertank_warm_rec massflow_from_watertank_warm;
protected
  record reverse_P_el_rec
    constant Real k = -1
                        "Gain value multiplied with input signal";
    Modelica_Blocks_Interfaces_RealInput u(unit = "W")
                                                      "Input signal connector";
    Modelica_Blocks_Interfaces_RealOutput y(unit = "W")
                                                       "Output signal connector";
  end reverse_P_el_rec;
public
  reverse_P_el_rec reverse_P_el;
protected
  record pipe_simple_chp_rec
    constant Boolean allowFlowReversal = true
                                             "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Boolean port_a_exposesState = false
                                                "= true if port_a exposes the state of a fluid volume";
    constant Boolean port_b_exposesState = false
                                                "= true if port_b.p exposes the state of a fluid volume";
    constant Boolean showDesignFlowDirection = true
                                                   "= false to hide the arrow in the model icon";
    constant Modelica.SIunits.Length l = 10
                                           "length of pipe (total, not per segment)";
    constant Modelica.SIunits.Length d_inner = 0.1
                                                  "diameter (inner) of pipe";
    constant Modelica.SIunits.Length d_middle = 0.12
                                                    "diameter (middle between wall and insulation) of pipe";
    constant Modelica.SIunits.Length d_outer = 0.2
                                                  "diameter (outer) of pipe";
    constant Integer n_seg = 1
                              "number of discrete segments within the pipe";
    constant Boolean useHeatPort = false
                                        "when set to TRUE a heatPort will be available, otherwise the fixedAmbientTemp is used for heat loss calculation";
    constant Modelica.SIunits.Temperature fixedTemp = 293.15
                                                            "fixed temperature which is used for heat loss calculation if not useHeatPort";
    constant Modelica.SIunits.CoefficientOfHeatTransfer alpha_inner = 300
                                                                         "heat transfer coefficient between medium (e.g. water) and solid wall";
    constant Modelica.SIunits.CoefficientOfHeatTransfer alpha_outer = 2
                                                                       "heat transfer coefficient between solid insulation and Atmosphere (e.g. air)";
    Modelica_Blocks_Interfaces_RealOutput Q_flow_loss(unit = "W")
                                                                 "Heat loss of pipe (positive if heat flows from pipe to ambient)";
  protected
    record 'vol[1]_rec'
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.SteadyState
                                                                                                     "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                               "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = false
                                                     "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 1
                                                                          "Nominal mass flow rate";
      constant Integer nPorts = 2
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.0001
                                                                             "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 3.141592653589793
                                                            "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 3127.7256636168477
                                                                                        "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.SteadyState
                                                                                                       "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                   "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 2
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 3127.7256636168477
                                                                                                        "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        parameter Modelica.SIunits.Energy _U_start = 261728083.5314578;
        Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 3127.7256636168477
                                                             "Mass of fluid";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0
                                                          "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 3.141592653589793
                                                                        "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal annotation(Dialog);
    end 'vol[1]_rec';
  public
    'vol[1]_rec' 'vol[1]' annotation(Dialog);
  protected
    record fixedTemperature_rec
      constant Modelica.SIunits.Temperature T = 293.15
                                                      "Fixed temperature at port";
    protected
      record port_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end fixedTemperature_rec;
  public
    fixedTemperature_rec fixedTemperature;
  protected
    record sta_default_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end sta_default_rec;
  public
    sta_default_rec sta_default;
    constant Modelica.SIunits.Area AIn = 0.3141592653589793
                                                           "Pipe cross-sectional area (without wall and insulation)";
    constant Modelica.SIunits.Volume VIn = 3.141592653589793
                                                            "Pipe volume (without wall and insulation)";
    constant Modelica.SIunits.Length lSeg = 10.0
                                                "lengh of a pipe segment";
    constant Modelica.SIunits.ThermalConductance U_fluSeg = 0.018786724068466962
                                                                                "Thermal conductance between fluid volumes";
    constant Modelica.SIunits.ThermalConductance U_wallSeg = 797.1416833780909
                                                                              "Thermal conductance through pipe wall";
    constant Modelica.SIunits.ThermalConductance U_insSeg = 3.2065218640229913
                                                                              "Thermal conductance through pipe insulation";
  protected
    record 'conWall[1]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 797.1416833780909
                                                                        "Constant thermal conductance of material";
    end 'conWall[1]_rec';
  public
    'conWall[1]_rec' 'conWall[1]';
  protected
    record theCol_rec
      constant Integer m(min = 1) = 1
                                     "Number of collected heat flows";
    protected
      record 'port_a[1]_rec'
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end 'port_a[1]_rec';
    public
      'port_a[1]_rec' 'port_a[1]';
    protected
      record port_b_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end theCol_rec;
  public
    theCol_rec theCol;
  protected
    record senQFlowLoss_rec
      Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                              "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end senQFlowLoss_rec;
  public
    senQFlowLoss_rec senQFlowLoss;
  protected
    record 'conIns[1]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 3.2065218640229913
                                                                         "Constant thermal conductance of material";
    end 'conIns[1]_rec';
  public
    'conIns[1]_rec' 'conIns[1]';
  end pipe_simple_chp_rec;
public
  pipe_simple_chp_rec pipe_simple_chp annotation(Dialog);
protected
  record pipe_simple_boiler_rec
    constant Boolean allowFlowReversal = true
                                             "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Boolean port_a_exposesState = false
                                                "= true if port_a exposes the state of a fluid volume";
    constant Boolean port_b_exposesState = false
                                                "= true if port_b.p exposes the state of a fluid volume";
    constant Boolean showDesignFlowDirection = true
                                                   "= false to hide the arrow in the model icon";
    constant Modelica.SIunits.Length l = 10
                                           "length of pipe (total, not per segment)";
    constant Modelica.SIunits.Length d_inner = 0.1
                                                  "diameter (inner) of pipe";
    constant Modelica.SIunits.Length d_middle = 0.12
                                                    "diameter (middle between wall and insulation) of pipe";
    constant Modelica.SIunits.Length d_outer = 0.2
                                                  "diameter (outer) of pipe";
    constant Integer n_seg = 1
                              "number of discrete segments within the pipe";
    constant Boolean useHeatPort = false
                                        "when set to TRUE a heatPort will be available, otherwise the fixedAmbientTemp is used for heat loss calculation";
    constant Modelica.SIunits.Temperature fixedTemp = 293.15
                                                            "fixed temperature which is used for heat loss calculation if not useHeatPort";
    constant Modelica.SIunits.CoefficientOfHeatTransfer alpha_inner = 300
                                                                         "heat transfer coefficient between medium (e.g. water) and solid wall";
    constant Modelica.SIunits.CoefficientOfHeatTransfer alpha_outer = 2
                                                                       "heat transfer coefficient between solid insulation and Atmosphere (e.g. air)";
    Modelica_Blocks_Interfaces_RealOutput Q_flow_loss(unit = "W")
                                                                 "Heat loss of pipe (positive if heat flows from pipe to ambient)";
  protected
    record 'vol[1]_rec'
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.SteadyState
                                                                                                     "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                               "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = false
                                                     "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 1
                                                                          "Nominal mass flow rate";
      constant Integer nPorts = 2
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.0001
                                                                             "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 3.141592653589793
                                                            "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 3127.7256636168477
                                                                                        "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.SteadyState
                                                                                                       "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                   "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 2
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 3127.7256636168477
                                                                                                        "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        parameter Modelica.SIunits.Energy _U_start = 261728083.5314578;
        Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 3127.7256636168477
                                                             "Mass of fluid";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0
                                                          "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 3.141592653589793
                                                                        "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal annotation(Dialog);
    end 'vol[1]_rec';
  public
    'vol[1]_rec' 'vol[1]' annotation(Dialog);
  protected
    record fixedTemperature_rec
      constant Modelica.SIunits.Temperature T = 293.15
                                                      "Fixed temperature at port";
    protected
      record port_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end fixedTemperature_rec;
  public
    fixedTemperature_rec fixedTemperature;
  protected
    record sta_default_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end sta_default_rec;
  public
    sta_default_rec sta_default;
    constant Modelica.SIunits.Area AIn = 0.3141592653589793
                                                           "Pipe cross-sectional area (without wall and insulation)";
    constant Modelica.SIunits.Volume VIn = 3.141592653589793
                                                            "Pipe volume (without wall and insulation)";
    constant Modelica.SIunits.Length lSeg = 10.0
                                                "lengh of a pipe segment";
    constant Modelica.SIunits.ThermalConductance U_fluSeg = 0.018786724068466962
                                                                                "Thermal conductance between fluid volumes";
    constant Modelica.SIunits.ThermalConductance U_wallSeg = 797.1416833780909
                                                                              "Thermal conductance through pipe wall";
    constant Modelica.SIunits.ThermalConductance U_insSeg = 3.2065218640229913
                                                                              "Thermal conductance through pipe insulation";
  protected
    record 'conWall[1]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 797.1416833780909
                                                                        "Constant thermal conductance of material";
    end 'conWall[1]_rec';
  public
    'conWall[1]_rec' 'conWall[1]';
  protected
    record theCol_rec
      constant Integer m(min = 1) = 1
                                     "Number of collected heat flows";
    protected
      record 'port_a[1]_rec'
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end 'port_a[1]_rec';
    public
      'port_a[1]_rec' 'port_a[1]';
    protected
      record port_b_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end theCol_rec;
  public
    theCol_rec theCol;
  protected
    record senQFlowLoss_rec
      Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                              "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end senQFlowLoss_rec;
  public
    senQFlowLoss_rec senQFlowLoss;
  protected
    record 'conIns[1]_rec'
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate from port_a -> port_b";
      Modelica.SIunits.TemperatureDifference dT
                                               "port_a.T - port_b.T";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        constant Modelica.SIunits.Temperature T = 293.15
                                                        "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.ThermalConductance G = 3.2065218640229913
                                                                         "Constant thermal conductance of material";
    end 'conIns[1]_rec';
  public
    'conIns[1]_rec' 'conIns[1]';
  end pipe_simple_boiler_rec;
public
  pipe_simple_boiler_rec pipe_simple_boiler annotation(Dialog);
protected
  record prescribedHeatFlow_rec
    constant Modelica.SIunits.Temperature T_ref = 293.15
                                                        "Reference temperature";
    constant Modelica.SIunits.LinearTemperatureCoefficient alpha = 0
                                                                    "Temperature coefficient of heat flow rate";
    Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W");
  protected
    record port_rec
      Modelica.SIunits.Temperature T
                                    "Port temperature";
      Modelica.SIunits.HeatFlowRate Q_flow
                                          "Heat flow rate (positive if flowing from outside into the component)";
    end port_rec;
  public
    port_rec port;
  end prescribedHeatFlow_rec;
public
  prescribedHeatFlow_rec prescribedHeatFlow;
protected
  record gain_rec
    constant Real k = -1
                        "Gain value multiplied with input signal";
    Modelica_Blocks_Interfaces_RealInput u
                                          "Input signal connector";
    Modelica_Blocks_Interfaces_RealOutput y(unit = "W")
                                                       "Output signal connector";
  end gain_rec;
public
  gain_rec gain;
protected
  record pump_simple_controlled_cHP_rec
    constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of energy balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                          "Type of mass balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                           "Type of trace substance balance: dynamic (3 initialization options) or steady state";
    constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                             "Start value of pressure";
    constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Start value of temperature";
    constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                         "Start value of mass fractions m_i/m";
    constant Real mSenFac(min = 1.0) = 1
                                        "Factor for scaling the sensible thermal mass of the volume";
    constant Boolean allowFlowReversal = false
                                              "= false to simplify equations, assuming, but not enforcing, no flow reversal";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0)
                                                                                                        "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 0.0)
                                                                                                         "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Boolean addPowerLossToMedium = true
                                                "Set to false to avoid any power (=heat and flow work) being added to medium (may give simpler equations)";
    constant Modelica.SIunits.Time tau = 1
                                          "Time constant of fluid volume for nominal flow, used if energy or mass balance is dynamic";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                          "Small mass flow rate for regularization of zero flow";
    constant Modelica.SIunits.MassFlowRate m_flow_nom = 10
                                                          "nominal mass flow at u=1";
    constant Modelica.SIunits.Power P_el_nom = 300
                                                  "nominal electrical power at u=1";
    constant Real u_min = 0.01
                              "minimal operation point - when u<u_min pump is switched off";
    constant Real f_el(min = 0.0) = 0.7
                                       "electrical power correction factor - e.g. 0.7 for ASM / 0.9 for PMSM";
    constant Modelica.SIunits.Angle rohrwink = 90
                                                 "Rohrwinkel";
    constant Integer controlMode = 1
                                    "control mode (only dT-control available so far)";
    constant Boolean dT_swapInputs = false
                                          "swap temperature inputs (dT-Control only)";
    constant Modelica.SIunits.TemperatureDifference dT_setPoint(min = 0.0) = 5
                                                                              "dT setpoint (only positive dT allowed)";
    constant Real k(min = 0.0) = 2
                                  "Gain of controller";
    constant Modelica.SIunits.Time Ti(min = 1E-60) = 60
                                                       "Time constant of controller integrator block";
    Modelica_Blocks_Interfaces_RealInput u;
    Modelica_Blocks_Interfaces_RealOutput y_actual
                                                  "Actual normalised pump speed that is used for computations";
    Modelica_Blocks_Interfaces_RealOutput P_el(unit = "W", quantity = "Power")
                                                                              "Electrical power consumed";
    constant Modelica.SIunits.VolumeFlowRate V_flow_max = 0.010044335697769956
                                                                              "Maximum volume flow rate, used for smoothing";
    constant Modelica.SIunits.Density rho_default = 995.586
                                                           "Default medium density";
  protected
    record sta_start_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end sta_start_rec;
  public
    sta_start_rec sta_start;
    constant Modelica.SIunits.SpecificEnthalpy h_outflow_start = 83680.0
                                                                        "Start value for outflowing enthalpy";
  protected
    record vol_rec
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = true
                                                    "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 10.0
                                                                             "Nominal mass flow rate";
      constant Integer nPorts = 2
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                            "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = false
                                                "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 0.010044335697769956
                                                               "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 10.0
                                                                          "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
      constant Modelica.SIunits.Time tau = 1.0
                                              "Time constant at nominal flow";
      constant Modelica.SIunits.Volume V_nominal = 0.010044335697769956
                                                                       "Volume of delay element";
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                   "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 2
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 10.0
                                                                                          "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        parameter Modelica.SIunits.Energy _U_start = 836800.0;
        Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 10.0
                                               "Mass of fluid";
        constant Real m_der(unit = "kg/s") = 0.0
                                                "der(Mass of fluid)";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                            "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 0.010044335697769956
                                                                           "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal annotation(Dialog);
    end vol_rec;
  public
    vol_rec vol annotation(Dialog);
  protected
    record gainMassFlow_rec
      constant Real k = 10.0
                            "Gain value multiplied with input signal";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Input signal connector";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Output signal connector";
    end gainMassFlow_rec;
  public
    gainMassFlow_rec gainMassFlow;
  protected
    record preSou_rec
      constant Boolean allowFlowReversal = false
                                                "= false to simplify equations, assuming, but not enforcing, no flow reversal";
    protected
      record port_a_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0)
                                                                                                          "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                     "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 0.0)
                                                                                                           "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.PressureDifference dp_start(displayUnit = "Pa") = 0
                                                                                   "Guess value of dp = port_a.p - port_b.p";
      constant Real m_flow_start(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0
                                                                                                                                 "Guess value of m_flow = port_a.m_flow";
      constant Real m_flow_small(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.001
                                                                                                                                     "Small mass flow rate for regularization of zero flow";
      constant Boolean show_T = false
                                     "= true, if temperatures at port_a and port_b are computed";
      constant Boolean show_V_flow = true
                                         "= true, if volume flow rate at inflowing port is computed";
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0)
                                                                                                        "Mass flow rate in design flow direction";
      constant Modelica.SIunits.PressureDifference dp(displayUnit = "Pa") = 0.0
                                                                               "Pressure difference between port_a and port_b (= port_a.p - port_b.p)";
      Modelica.SIunits.VolumeFlowRate V_flow
                                            "Volume flow rate at inflowing port (positive when flow from port_a to port_b)";
      constant Boolean control_m_flow = true
                                            "if true, then the mass flow rate is equal to the value of m_flow_in";
      constant Boolean control_dp = false
                                         "if true, then the head is equal to the value of dp_in";
      Modelica_Blocks_Interfaces_RealInput m_flow_in(unit = "kg/s")
                                                                   "Prescribed mass flow rate";
      Modelica_Blocks_Interfaces_RealInput m_flow_internal(unit = "kg/s")
                                                                         "Needed to connect to conditional connector";
      constant Modelica_Blocks_Interfaces_RealInput dp_internal(unit = "Pa") = 0
                                                                                "Needed to connect to conditional connector";
    end preSou_rec;
  public
    preSou_rec preSou;
  protected
    record prePow_rec
      constant Modelica.SIunits.Temperature T_ref = 293.15
                                                          "Reference temperature";
      constant Modelica.SIunits.LinearTemperatureCoefficient alpha = 0
                                                                      "Temperature coefficient of heat flow rate";
      Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W");
    protected
      record port_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end prePow_rec;
  public
    prePow_rec prePow;
  protected
    record senMasFlo_rec
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal";
    protected
      record port_a_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -1E+60, max = 100000.0)
                                                                                                             "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                     "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 1E+60)
                                                                                                             "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 0
                                                                          "Nominal mass flow rate, used for regularization near zero flow";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0
                                                                        "For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required)";
      Modelica_Blocks_Interfaces_RealOutput m_flow(unit = "kg/s", quantity = "MassFlowRate")
                                                                                            "Mass flow rate from port_a to port_b";
    end senMasFlo_rec;
  public
    senMasFlo_rec senMasFlo;
  protected
    record gainMassFlow1_rec
      constant Real k = 300.0
                             "Gain value multiplied with input signal";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Input signal connector";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Output signal connector";
    end gainMassFlow1_rec;
  public
    gainMassFlow1_rec gainMassFlow1;
  protected
    record zeroLimiter_rec
      constant Real u_max = 1
                             "Upper limits of input signals";
      constant Real u_min = 0.01
                                "Lower limits of input signals - u<u_min is zero";
      constant Real u_0 = 0
                           "output value for u<u_min";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
    end zeroLimiter_rec;
  public
    zeroLimiter_rec zeroLimiter;
  protected
    record powerN_rec
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
      constant Real n = 0.7;
    end powerN_rec;
  public
    powerN_rec powerN;
  protected
    record m_flow_small_limiter_rec
      constant Real uMax(unit = "kg/s") = 1E+60
                                               "Upper limits of input signals";
      constant Real uMin(unit = "kg/s") = 0.001
                                               "Lower limits of input signals";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
      constant Boolean limitsAtInit = true
                                          "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)";
      Modelica_Blocks_Interfaces_RealInput u(unit = "kg/s")
                                                           "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y(unit = "kg/s")
                                                            "Connector of Real output signal";
    end m_flow_small_limiter_rec;
  public
    m_flow_small_limiter_rec m_flow_small_limiter;
    Modelica_Blocks_Interfaces_RealInput T_flow(unit = "K", min = 0.0);
    Modelica_Blocks_Interfaces_RealInput T_return(unit = "K", min = 0.0);
  protected
    record off_constant_rec
      constant Real k = 0
                         "Constant output value";
      constant Modelica_Blocks_Interfaces_RealOutput y = 0
                                                          "Connector of Real output signal";
    end off_constant_rec;
  public
    off_constant_rec off_constant;
  protected
    record PID_rec
      constant Modelica_Blocks_Interfaces_RealInput u_s(unit = "K") = -5.0
                                                                          "Connector of setpoint input signal";
      Modelica_Blocks_Interfaces_RealInput u_m(unit = "K")
                                                          "Connector of measurement input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of actuator output signal";
      Real controlError(unit = "K")
                                   "Control error (set point - measurement)";
      constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI
                                                                                                                "Type of controller";
      constant Real k(min = 0.0) = 2
                                    "Gain of controller";
      constant Modelica.SIunits.Time Ti(min = 1E-60) = 60
                                                         "Time constant of Integrator block";
      constant Modelica.SIunits.Time Td(min = 0.0) = 0.1
                                                        "Time constant of Derivative block";
      constant Real yMax = 1
                            "Upper limit of output";
      constant Real yMin = 0.01
                               "Lower limit of output";
      constant Real wp(min = 0.0) = 1
                                     "Set-point weight for Proportional block (0..1)";
      constant Real wd(min = 0.0) = 0
                                     "Set-point weight for Derivative block (0..1)";
      constant Real Ni(min = 1E-13) = 0.9
                                         "Ni*Ti is time constant of anti-windup compensation";
      constant Real Nd(min = 1E-13) = 10
                                        "The higher Nd, the more ideal the derivative block";
      constant Modelica.Blocks.Types.InitPID initType = Modelica.Blocks.Types.InitPID.DoNotUse_InitialIntegratorState
                                                                                                                     "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)";
      constant Boolean limitsAtInit = true
                                          "= false, if limits are ignored during initialization";
      constant Real xi_start = 0
                                "Initial or guess value value for integrator output (= integrator state)";
      constant Real xd_start = 0
                                "Initial or guess value for state of derivative block";
      constant Real y_start = 0
                               "Initial value of output";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
    protected
      record addP_rec
        constant Modelica_Blocks_Interfaces_RealInput u1(unit = "K") = -5.0
                                                                           "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2(unit = "K")
                                                           "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signal";
        constant Real k1 = 1.0
                              "Gain of upper input";
        constant Real k2 = -1
                             "Gain of lower input";
      end addP_rec;
    public
      addP_rec addP;
    protected
      record P_rec
        constant Real k = 1
                           "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Output signal connector";
      end P_rec;
    public
      P_rec P;
    protected
      record gainPID_rec
        constant Real k = 2.0
                             "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Output signal connector";
      end gainPID_rec;
    public
      gainPID_rec gainPID;
    protected
      record addPID_rec
        constant Real k1 = 1
                            "Gain of upper input";
        constant Real k2 = 1
                            "Gain of middle input";
        constant Real k3 = 1
                            "Gain of lower input";
        Modelica_Blocks_Interfaces_RealInput u1
                                               "Connector 1 of Real input signals";
        constant Modelica_Blocks_Interfaces_RealInput u2 = 0
                                                            "Connector 2 of Real input signals";
        Modelica_Blocks_Interfaces_RealInput u3
                                               "Connector 3 of Real input signals";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signals";
      end addPID_rec;
    public
      addPID_rec addPID;
    protected
      record limiter_rec
        constant Real uMax = 1.0
                                "Upper limits of input signals";
        constant Real uMin = 0.01
                                 "Lower limits of input signals";
        constant Boolean strict = false
                                       "= true, if strict limits with noEvent(..)";
        constant Boolean limitsAtInit = true
                                            "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signal";
      end limiter_rec;
    public
      limiter_rec limiter;
    protected
      record Dzero_rec
        constant Real k = 0
                           "Constant output value";
        constant Modelica_Blocks_Interfaces_RealOutput y = 0.0
                                                              "Connector of Real output signal";
      end Dzero_rec;
    public
      Dzero_rec Dzero;
    protected
      record I_rec
        constant Real k = 0.016666666666666666
                                              "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState
                                                                                              "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0.0
                                   "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y(fixed=false)
                                                            "Connector of Real output signal";
      end I_rec;
    public
      I_rec I;
    protected
      record addI_rec
        constant Real k1 = 1
                            "Gain of upper input";
        constant Real k2 = -1
                             "Gain of middle input";
        constant Real k3 = 1
                            "Gain of lower input";
        constant Modelica_Blocks_Interfaces_RealInput u1(unit = "K") = -5.0
                                                                           "Connector 1 of Real input signals";
        Modelica_Blocks_Interfaces_RealInput u2(unit = "K")
                                                           "Connector 2 of Real input signals";
        Modelica_Blocks_Interfaces_RealInput u3
                                               "Connector 3 of Real input signals";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signals";
      end addI_rec;
    public
      addI_rec addI;
    protected
      record addSat_rec
        Modelica_Blocks_Interfaces_RealInput u1
                                               "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2
                                               "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signal";
        constant Real k1 = 1
                            "Gain of upper input";
        constant Real k2 = -1
                             "Gain of lower input";
      end addSat_rec;
    public
      addSat_rec addSat;
    protected
      record gainTrack_rec
        constant Real k = 0.5555555555555556
                                            "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Output signal connector";
      end gainTrack_rec;
    public
      gainTrack_rec gainTrack;
    end PID_rec;
  public
    PID_rec PID;
  protected
    record greaterThreshold_rec
      constant Real threshold = 0
                                 "Comparison with respect to threshold";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Boolean input signal";
      Modelica_Blocks_Interfaces_BooleanOutput y
                                                "Connector of Boolean output signal";
    end greaterThreshold_rec;
  public
    greaterThreshold_rec greaterThreshold;
  protected
    record switch1_rec
      Modelica_Blocks_Interfaces_RealInput u1
                                             "Connector of first Real input signal";
      Modelica_Blocks_Interfaces_BooleanInput u2
                                                "Connector of Boolean input signal";
      constant Modelica_Blocks_Interfaces_RealInput u3 = 0.0
                                                            "Connector of second Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
    end switch1_rec;
  public
    switch1_rec switch1;
  protected
    record add_rec
      Modelica_Blocks_Interfaces_RealInput u1(unit = "K")
                                                         "Connector of Real input signal 1";
      Modelica_Blocks_Interfaces_RealInput u2(unit = "K")
                                                         "Connector of Real input signal 2";
      Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                         "Connector of Real output signal";
      constant Real k1 = -1
                           "Gain of upper input";
      constant Real k2 = 1
                          "Gain of lower input";
    end add_rec;
  public
    add_rec add;
  protected
    record dT_reference_rec
      constant Real k(unit = "K") = -5.0
                                        "Constant output value";
      constant Modelica_Blocks_Interfaces_RealOutput y(unit = "K") = -5.0
                                                                         "Connector of Real output signal";
    end dT_reference_rec;
  public
    dT_reference_rec dT_reference;
  end pump_simple_controlled_cHP_rec;
public
  pump_simple_controlled_cHP_rec pump_simple_controlled_cHP annotation(Dialog);
protected
  record pump_simple_controlled_Boiler_rec
    constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of energy balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                          "Type of mass balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                           "Type of trace substance balance: dynamic (3 initialization options) or steady state";
    constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                             "Start value of pressure";
    constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Start value of temperature";
    constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                         "Start value of mass fractions m_i/m";
    constant Real mSenFac(min = 1.0) = 1
                                        "Factor for scaling the sensible thermal mass of the volume";
    constant Boolean allowFlowReversal = false
                                              "= false to simplify equations, assuming, but not enforcing, no flow reversal";
  protected
    record port_a_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0)
                                                                                                        "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 0.0)
                                                                                                         "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_b_rec;
  public
    port_b_rec port_b;
    constant Boolean addPowerLossToMedium = true
                                                "Set to false to avoid any power (=heat and flow work) being added to medium (may give simpler equations)";
    constant Modelica.SIunits.Time tau = 1
                                          "Time constant of fluid volume for nominal flow, used if energy or mass balance is dynamic";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                          "Small mass flow rate for regularization of zero flow";
    constant Modelica.SIunits.MassFlowRate m_flow_nom = 10
                                                          "nominal mass flow at u=1";
    constant Modelica.SIunits.Power P_el_nom = 300
                                                  "nominal electrical power at u=1";
    constant Real u_min = 0.01
                              "minimal operation point - when u<u_min pump is switched off";
    constant Real f_el(min = 0.0) = 0.7
                                       "electrical power correction factor - e.g. 0.7 for ASM / 0.9 for PMSM";
    constant Modelica.SIunits.Angle rohrwink = 90
                                                 "Rohrwinkel";
    constant Integer controlMode = 1
                                    "control mode (only dT-control available so far)";
    constant Boolean dT_swapInputs = false
                                          "swap temperature inputs (dT-Control only)";
    constant Modelica.SIunits.TemperatureDifference dT_setPoint(min = 0.0) = 5
                                                                              "dT setpoint (only positive dT allowed)";
    constant Real k(min = 0.0) = 2
                                  "Gain of controller";
    constant Modelica.SIunits.Time Ti(min = 1E-60) = 60
                                                       "Time constant of controller integrator block";
    Modelica_Blocks_Interfaces_RealInput u;
    Modelica_Blocks_Interfaces_RealOutput y_actual
                                                  "Actual normalised pump speed that is used for computations";
    Modelica_Blocks_Interfaces_RealOutput P_el(unit = "W", quantity = "Power")
                                                                              "Electrical power consumed";
    constant Modelica.SIunits.VolumeFlowRate V_flow_max = 0.010044335697769956
                                                                              "Maximum volume flow rate, used for smoothing";
    constant Modelica.SIunits.Density rho_default = 995.586
                                                           "Default medium density";
  protected
    record sta_start_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end sta_start_rec;
  public
    sta_start_rec sta_start;
    constant Modelica.SIunits.SpecificEnthalpy h_outflow_start = 83680.0
                                                                        "Start value for outflowing enthalpy";
  protected
    record vol_rec
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1
                                          "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean prescribedHeatFlowRate = true
                                                    "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 10.0
                                                                             "Nominal mass flow rate";
      constant Integer nPorts = 2
                                 "Number of ports";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.001
                                                                            "Small mass flow rate for regularization of zero flow";
      constant Boolean allowFlowReversal = false
                                                "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
      constant Modelica.SIunits.Volume V = 0.010044335697769956
                                                               "Volume";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
      Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                "Temperature of the fluid";
      Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                         "Internal energy of the component";
      constant Modelica.SIunits.Pressure p = 101325.0
                                                     "Pressure of the fluid";
      constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 10.0
                                                                          "Mass of the component";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute start and guess values";
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
    protected
      record state_start_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_start_rec;
    public
      state_start_rec state_start;
      constant Boolean useSteadyStateTwoPort = false
                                                    "Flag, true if the model has two ports only and uses a steady state balance";
      Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                        "Internal connector for leaving temperature of the component";
    protected
      record preTem_rec
      protected
        record port_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_rec;
      public
        port_rec port;
        Modelica_Blocks_Interfaces_RealInput T(unit = "K");
      end preTem_rec;
    public
      preTem_rec preTem;
    protected
      record portT_rec
        Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                           "Value of Real output";
      end portT_rec;
    public
      portT_rec portT;
    protected
      record heaFloSen_rec
        Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W")
                                                                "Heat flow from port_a to port_b as output signal";
      protected
        record port_a_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica.SIunits.Temperature T
                                        "Port temperature";
          Modelica.SIunits.HeatFlowRate Q_flow
                                              "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end heaFloSen_rec;
    public
      heaFloSen_rec heaFloSen;
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
    protected
      record heatPort_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end heatPort_rec;
    public
      heatPort_rec heatPort;
      constant Modelica.SIunits.Time tau = 1.0
                                              "Time constant at nominal flow";
      constant Modelica.SIunits.Volume V_nominal = 0.010044335697769956
                                                                       "Volume of delay element";
    protected
      record dynBal_rec
        constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                "Type of energy balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of mass balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                   "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
        constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of trace substance balance: dynamic (3 initialization options) or steady state";
        constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                   "Start value of pressure";
        constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                          "Start value of temperature";
        constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                             "Start value of mass fractions m_i/m";
        constant Real mSenFac(min = 1.0) = 1.0
                                              "Factor for scaling the sensible thermal mass of the volume";
        constant Boolean simplify_mWat_flow = true
                                                  "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
        constant Integer nPorts = 2
                                   "Number of ports";
        constant Boolean use_mWat_flow = false
                                              "Set to true to enable input connector for moisture mass flow rate";
        constant Boolean use_C_flow = false
                                           "Set to true to enable input connector for trace substance";
        Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W")
                                                               "Sensible plus latent heat flow rate transferred into the medium";
        Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                                 "Leaving specific enthalpy of the component";
        Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                              "Internal energy of the component";
        constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 10.0
                                                                                          "Mass of the component";
      protected
        record 'ports[1]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[1]_rec';
      public
        'ports[1]_rec' 'ports[1]';
      protected
        record 'ports[2]_rec'
          Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                  "Mass flow rate from the connection point into the component";
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Thermodynamic pressure in the connection point";
          Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                    "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
        end 'ports[2]_rec';
      public
        'ports[2]_rec' 'ports[2]';
      protected
        record medium_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                            "Absolute pressure of medium";
          Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                            "Specific enthalpy of medium";
          constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                          "Density of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
          constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                    "Mass fractions (= (component mass)/total mass  m_i/m)";
          Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                        "Specific internal energy of medium";
          constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                  "Gas constant (of mixture if applicable)";
          constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                           "Molar mass (of mixture or single fluid)";
        protected
          record state_rec
            constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Absolute pressure of medium";
            Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                      "Temperature of medium";
          end state_rec;
        public
          state_rec state;
          constant Boolean preferredMediumStates = false
                                                        "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
          constant Boolean standardOrderComponents = true
                                                         "If true, and reducedX = true, the last element of X will be computed from the other ones";
          Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                         "Temperature of medium in [degC]";
          constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                       "Absolute pressure of medium in [bar]";
        end medium_rec;
      public
        medium_rec medium;
        parameter Modelica.SIunits.Energy _U_start = 836800.0;
        Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                  "Internal energy of fluid";
        constant Modelica.SIunits.Mass m = 10.0
                                               "Mass of fluid";
        constant Real m_der(unit = "kg/s") = 0.0
                                                "der(Mass of fluid)";
        constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                            "Mass flows across boundaries";
        Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                                 "Enthalpy flow across boundaries or energy source/sink";
        constant Modelica.SIunits.Volume fluidVolume = 0.010044335697769956
                                                                           "Volume";
        constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                         "Aditional heat capacity for implementing mFactor";
        Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
        constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                        "Heat capacity, to compute additional dry mass";
        constant Modelica.SIunits.Density rho_start = 995.586
                                                             "Density, used to compute fluid mass";
        constant Boolean computeCSen = false;
      protected
        record state_default_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Temperature of medium";
        end state_default_rec;
      public
        state_default_rec state_default;
        constant Modelica.SIunits.Density rho_default = 995.586
                                                               "Density, used to compute fluid mass";
        constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                   "Start value for specific enthalpy";
        constant Boolean _simplify_mWat_flow = false
                                                    "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
        constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                           "Needed to connect to conditional connector";
      end dynBal_rec;
    public
      dynBal_rec dynBal annotation(Dialog);
    end vol_rec;
  public
    vol_rec vol annotation(Dialog);
  protected
    record gainMassFlow_rec
      constant Real k = 10.0
                            "Gain value multiplied with input signal";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Input signal connector";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Output signal connector";
    end gainMassFlow_rec;
  public
    gainMassFlow_rec gainMassFlow;
  protected
    record preSou_rec
      constant Boolean allowFlowReversal = false
                                                "= false to simplify equations, assuming, but not enforcing, no flow reversal";
    protected
      record port_a_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0)
                                                                                                          "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                     "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 0.0)
                                                                                                           "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.PressureDifference dp_start(displayUnit = "Pa") = 0
                                                                                   "Guess value of dp = port_a.p - port_b.p";
      constant Real m_flow_start(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0
                                                                                                                                 "Guess value of m_flow = port_a.m_flow";
      constant Real m_flow_small(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0) = 0.001
                                                                                                                                     "Small mass flow rate for regularization of zero flow";
      constant Boolean show_T = false
                                     "= true, if temperatures at port_a and port_b are computed";
      constant Boolean show_V_flow = true
                                         "= true, if volume flow rate at inflowing port is computed";
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 100000.0)
                                                                                                        "Mass flow rate in design flow direction";
      constant Modelica.SIunits.PressureDifference dp(displayUnit = "Pa") = 0.0
                                                                               "Pressure difference between port_a and port_b (= port_a.p - port_b.p)";
      Modelica.SIunits.VolumeFlowRate V_flow
                                            "Volume flow rate at inflowing port (positive when flow from port_a to port_b)";
      constant Boolean control_m_flow = true
                                            "if true, then the mass flow rate is equal to the value of m_flow_in";
      constant Boolean control_dp = false
                                         "if true, then the head is equal to the value of dp_in";
      Modelica_Blocks_Interfaces_RealInput m_flow_in(unit = "kg/s")
                                                                   "Prescribed mass flow rate";
      Modelica_Blocks_Interfaces_RealInput m_flow_internal(unit = "kg/s")
                                                                         "Needed to connect to conditional connector";
      constant Modelica_Blocks_Interfaces_RealInput dp_internal(unit = "Pa") = 0
                                                                                "Needed to connect to conditional connector";
    end preSou_rec;
  public
    preSou_rec preSou;
  protected
    record prePow_rec
      constant Modelica.SIunits.Temperature T_ref = 293.15
                                                          "Reference temperature";
      constant Modelica.SIunits.LinearTemperatureCoefficient alpha = 0
                                                                      "Temperature coefficient of heat flow rate";
      Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W");
    protected
      record port_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        Modelica.SIunits.HeatFlowRate Q_flow
                                            "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
    end prePow_rec;
  public
    prePow_rec prePow;
  protected
    record senMasFlo_rec
      constant Boolean allowFlowReversal = true
                                               "= false to simplify equations, assuming, but not enforcing, no flow reversal";
    protected
      record port_a_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -1E+60, max = 100000.0)
                                                                                                             "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 83680.0
                                                                                                                                                     "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 1E+60)
                                                                                                             "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end port_b_rec;
    public
      port_b_rec port_b;
      constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 0
                                                                          "Nominal mass flow rate, used for regularization near zero flow";
      constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0
                                                                        "For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required)";
      Modelica_Blocks_Interfaces_RealOutput m_flow(unit = "kg/s", quantity = "MassFlowRate")
                                                                                            "Mass flow rate from port_a to port_b";
    end senMasFlo_rec;
  public
    senMasFlo_rec senMasFlo;
  protected
    record gainMassFlow1_rec
      constant Real k = 300.0
                             "Gain value multiplied with input signal";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Input signal connector";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Output signal connector";
    end gainMassFlow1_rec;
  public
    gainMassFlow1_rec gainMassFlow1;
  protected
    record zeroLimiter_rec
      constant Real u_max = 1
                             "Upper limits of input signals";
      constant Real u_min = 0.01
                                "Lower limits of input signals - u<u_min is zero";
      constant Real u_0 = 0
                           "output value for u<u_min";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
    end zeroLimiter_rec;
  public
    zeroLimiter_rec zeroLimiter;
  protected
    record powerN_rec
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
      constant Real n = 0.7;
    end powerN_rec;
  public
    powerN_rec powerN;
  protected
    record m_flow_small_limiter_rec
      constant Real uMax(unit = "kg/s") = 1E+60
                                               "Upper limits of input signals";
      constant Real uMin(unit = "kg/s") = 0.001
                                               "Lower limits of input signals";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
      constant Boolean limitsAtInit = true
                                          "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)";
      Modelica_Blocks_Interfaces_RealInput u(unit = "kg/s")
                                                           "Connector of Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y(unit = "kg/s")
                                                            "Connector of Real output signal";
    end m_flow_small_limiter_rec;
  public
    m_flow_small_limiter_rec m_flow_small_limiter;
    Modelica_Blocks_Interfaces_RealInput T_flow(unit = "K", min = 0.0);
    Modelica_Blocks_Interfaces_RealInput T_return(unit = "K", min = 0.0);
  protected
    record off_constant_rec
      constant Real k = 0
                         "Constant output value";
      constant Modelica_Blocks_Interfaces_RealOutput y = 0
                                                          "Connector of Real output signal";
    end off_constant_rec;
  public
    off_constant_rec off_constant;
  protected
    record PID_rec
      constant Modelica_Blocks_Interfaces_RealInput u_s(unit = "K") = -5.0
                                                                          "Connector of setpoint input signal";
      Modelica_Blocks_Interfaces_RealInput u_m(unit = "K")
                                                          "Connector of measurement input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of actuator output signal";
      Real controlError(unit = "K")
                                   "Control error (set point - measurement)";
      constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI
                                                                                                                "Type of controller";
      constant Real k(min = 0.0) = 2
                                    "Gain of controller";
      constant Modelica.SIunits.Time Ti(min = 1E-60) = 60
                                                         "Time constant of Integrator block";
      constant Modelica.SIunits.Time Td(min = 0.0) = 0.1
                                                        "Time constant of Derivative block";
      constant Real yMax = 1
                            "Upper limit of output";
      constant Real yMin = 0.01
                               "Lower limit of output";
      constant Real wp(min = 0.0) = 1
                                     "Set-point weight for Proportional block (0..1)";
      constant Real wd(min = 0.0) = 0
                                     "Set-point weight for Derivative block (0..1)";
      constant Real Ni(min = 1E-13) = 0.9
                                         "Ni*Ti is time constant of anti-windup compensation";
      constant Real Nd(min = 1E-13) = 10
                                        "The higher Nd, the more ideal the derivative block";
      constant Modelica.Blocks.Types.InitPID initType = Modelica.Blocks.Types.InitPID.DoNotUse_InitialIntegratorState
                                                                                                                     "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)";
      constant Boolean limitsAtInit = true
                                          "= false, if limits are ignored during initialization";
      constant Real xi_start = 0
                                "Initial or guess value value for integrator output (= integrator state)";
      constant Real xd_start = 0
                                "Initial or guess value for state of derivative block";
      constant Real y_start = 0
                               "Initial value of output";
      constant Boolean strict = false
                                     "= true, if strict limits with noEvent(..)";
    protected
      record addP_rec
        constant Modelica_Blocks_Interfaces_RealInput u1(unit = "K") = -5.0
                                                                           "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2(unit = "K")
                                                           "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signal";
        constant Real k1 = 1.0
                              "Gain of upper input";
        constant Real k2 = -1
                             "Gain of lower input";
      end addP_rec;
    public
      addP_rec addP;
    protected
      record P_rec
        constant Real k = 1
                           "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Output signal connector";
      end P_rec;
    public
      P_rec P;
    protected
      record gainPID_rec
        constant Real k = 2.0
                             "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Output signal connector";
      end gainPID_rec;
    public
      gainPID_rec gainPID;
    protected
      record addPID_rec
        constant Real k1 = 1
                            "Gain of upper input";
        constant Real k2 = 1
                            "Gain of middle input";
        constant Real k3 = 1
                            "Gain of lower input";
        Modelica_Blocks_Interfaces_RealInput u1
                                               "Connector 1 of Real input signals";
        constant Modelica_Blocks_Interfaces_RealInput u2 = 0
                                                            "Connector 2 of Real input signals";
        Modelica_Blocks_Interfaces_RealInput u3
                                               "Connector 3 of Real input signals";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signals";
      end addPID_rec;
    public
      addPID_rec addPID;
    protected
      record limiter_rec
        constant Real uMax = 1.0
                                "Upper limits of input signals";
        constant Real uMin = 0.01
                                 "Lower limits of input signals";
        constant Boolean strict = false
                                       "= true, if strict limits with noEvent(..)";
        constant Boolean limitsAtInit = true
                                            "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signal";
      end limiter_rec;
    public
      limiter_rec limiter;
    protected
      record Dzero_rec
        constant Real k = 0
                           "Constant output value";
        constant Modelica_Blocks_Interfaces_RealOutput y = 0.0
                                                              "Connector of Real output signal";
      end Dzero_rec;
    public
      Dzero_rec Dzero;
    protected
      record I_rec
        constant Real k = 0.016666666666666666
                                              "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState
                                                                                              "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0.0
                                   "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y(fixed=false)
                                                            "Connector of Real output signal";
      end I_rec;
    public
      I_rec I;
    protected
      record addI_rec
        constant Real k1 = 1
                            "Gain of upper input";
        constant Real k2 = -1
                             "Gain of middle input";
        constant Real k3 = 1
                            "Gain of lower input";
        constant Modelica_Blocks_Interfaces_RealInput u1(unit = "K") = -5.0
                                                                           "Connector 1 of Real input signals";
        Modelica_Blocks_Interfaces_RealInput u2(unit = "K")
                                                           "Connector 2 of Real input signals";
        Modelica_Blocks_Interfaces_RealInput u3
                                               "Connector 3 of Real input signals";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signals";
      end addI_rec;
    public
      addI_rec addI;
    protected
      record addSat_rec
        Modelica_Blocks_Interfaces_RealInput u1
                                               "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2
                                               "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Connector of Real output signal";
        constant Real k1 = 1
                            "Gain of upper input";
        constant Real k2 = -1
                             "Gain of lower input";
      end addSat_rec;
    public
      addSat_rec addSat;
    protected
      record gainTrack_rec
        constant Real k = 0.5555555555555556
                                            "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u
                                              "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y
                                               "Output signal connector";
      end gainTrack_rec;
    public
      gainTrack_rec gainTrack;
    end PID_rec;
  public
    PID_rec PID;
  protected
    record greaterThreshold_rec
      constant Real threshold = 0
                                 "Comparison with respect to threshold";
      Modelica_Blocks_Interfaces_RealInput u
                                            "Connector of Boolean input signal";
      Modelica_Blocks_Interfaces_BooleanOutput y
                                                "Connector of Boolean output signal";
    end greaterThreshold_rec;
  public
    greaterThreshold_rec greaterThreshold;
  protected
    record switch1_rec
      Modelica_Blocks_Interfaces_RealInput u1
                                             "Connector of first Real input signal";
      Modelica_Blocks_Interfaces_BooleanInput u2
                                                "Connector of Boolean input signal";
      constant Modelica_Blocks_Interfaces_RealInput u3 = 0.0
                                                            "Connector of second Real input signal";
      Modelica_Blocks_Interfaces_RealOutput y
                                             "Connector of Real output signal";
    end switch1_rec;
  public
    switch1_rec switch1;
  protected
    record add_rec
      Modelica_Blocks_Interfaces_RealInput u1(unit = "K")
                                                         "Connector of Real input signal 1";
      Modelica_Blocks_Interfaces_RealInput u2(unit = "K")
                                                         "Connector of Real input signal 2";
      Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                         "Connector of Real output signal";
      constant Real k1 = -1
                           "Gain of upper input";
      constant Real k2 = 1
                          "Gain of lower input";
    end add_rec;
  public
    add_rec add;
  protected
    record dT_reference_rec
      constant Real k(unit = "K") = -5.0
                                        "Constant output value";
      constant Modelica_Blocks_Interfaces_RealOutput y(unit = "K") = -5.0
                                                                         "Connector of Real output signal";
    end dT_reference_rec;
  public
    dT_reference_rec dT_reference;
  end pump_simple_controlled_Boiler_rec;
public
  pump_simple_controlled_Boiler_rec pump_simple_controlled_Boiler annotation(Dialog);
protected
  record Temp_before_cHP_rec
  protected
    record port_rec
      constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 0.0) = 0
                                                                                                                "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 0
                                                                                                                                             "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_rec;
  public
    port_rec port;
    Modelica_Blocks_Interfaces_RealOutput T(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature", min = 0.0)
                                                                                                                               "Temperature in port medium";
  end Temp_before_cHP_rec;
public
  Temp_before_cHP_rec Temp_before_cHP;
protected
  record Temp_after_cHP_rec
  protected
    record port_rec
      constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 0.0) = 0
                                                                                                                "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 0
                                                                                                                                             "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_rec;
  public
    port_rec port;
    Modelica_Blocks_Interfaces_RealOutput T(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature", min = 0.0)
                                                                                                                               "Temperature in port medium";
  end Temp_after_cHP_rec;
public
  Temp_after_cHP_rec Temp_after_cHP;
protected
  record Temp_before_Boiler_rec
  protected
    record port_rec
      constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 0.0) = 0
                                                                                                                "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 0
                                                                                                                                             "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_rec;
  public
    port_rec port;
    Modelica_Blocks_Interfaces_RealOutput T(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature", min = 0.0)
                                                                                                                               "Temperature in port medium";
  end Temp_before_Boiler_rec;
public
  Temp_before_Boiler_rec Temp_before_Boiler;
protected
  record Temp_after_Boiler_rec
  protected
    record port_rec
      constant Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = 0.0, max = 0.0) = 0
                                                                                                                "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      constant Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0) = 0
                                                                                                                                             "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_rec;
  public
    port_rec port;
    Modelica_Blocks_Interfaces_RealOutput T(unit = "K", displayUnit = "degC", quantity = "ThermodynamicTemperature", min = 0.0)
                                                                                                                               "Temperature in port medium";
  end Temp_after_Boiler_rec;
public
  Temp_after_Boiler_rec Temp_after_Boiler;
protected
  record MixingVolume_rec
    constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of energy balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                          "Type of mass balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                               "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
    constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                           "Type of trace substance balance: dynamic (3 initialization options) or steady state";
    constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325
                                                                                                                                             "Start value of pressure";
    constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                      "Start value of temperature";
    constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                         "Start value of mass fractions m_i/m";
    constant Real mSenFac(min = 1.0) = 1
                                        "Factor for scaling the sensible thermal mass of the volume";
    constant Boolean prescribedHeatFlowRate = false
                                                   "Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false";
    constant Boolean simplify_mWat_flow = true
                                              "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero";
    constant Modelica.SIunits.MassFlowRate m_flow_nominal(min = 0.0) = 20
                                                                         "Nominal mass flow rate";
    constant Integer nPorts = 3
                               "Number of ports";
    constant Modelica.SIunits.MassFlowRate m_flow_small(min = 0.0) = 0.002
                                                                          "Small mass flow rate for regularization of zero flow";
    constant Boolean allowFlowReversal = true
                                             "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports.";
    constant Modelica.SIunits.Volume V = 0.01
                                             "Volume";
  protected
    record 'ports[1]_rec'
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end 'ports[1]_rec';
  public
    'ports[1]_rec' 'ports[1]';
  protected
    record 'ports[2]_rec'
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end 'ports[2]_rec';
  public
    'ports[2]_rec' 'ports[2]';
  protected
    record 'ports[3]_rec'
      Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                              "Mass flow rate from the connection point into the component";
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Thermodynamic pressure in the connection point";
      Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end 'ports[3]_rec';
  public
    'ports[3]_rec' 'ports[3]';
    Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                              "Temperature of the fluid";
    Modelica_Blocks_Interfaces_RealOutput U(unit = "J")
                                                       "Internal energy of the component";
    constant Modelica.SIunits.Pressure p = 101325.0
                                                   "Pressure of the fluid";
    constant Modelica_Blocks_Interfaces_RealOutput m(unit = "kg") = 9.95586
                                                                           "Mass of the component";
    constant Modelica.SIunits.Density rho_start = 995.586
                                                         "Density, used to compute start and guess values";
  protected
    record state_default_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end state_default_rec;
  public
    state_default_rec state_default;
    constant Modelica.SIunits.Density rho_default = 995.586
                                                           "Density, used to compute fluid mass";
  protected
    record state_start_rec
      constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                           "Absolute pressure of medium";
      constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                  "Temperature of medium";
    end state_start_rec;
  public
    state_start_rec state_start;
    constant Boolean useSteadyStateTwoPort = false
                                                  "Flag, true if the model has two ports only and uses a steady state balance";
    Modelica_Blocks_Interfaces_RealOutput hOut_internal(unit = "J/kg")
                                                                      "Internal connector for leaving temperature of the component";
  protected
    record preTem_rec
    protected
      record port_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_rec;
    public
      port_rec port;
      Modelica_Blocks_Interfaces_RealInput T(unit = "K");
    end preTem_rec;
  public
    preTem_rec preTem;
  protected
    record portT_rec
      Modelica_Blocks_Interfaces_RealOutput y(unit = "K")
                                                         "Value of Real output";
    end portT_rec;
  public
    portT_rec portT;
  protected
    record heaFloSen_rec
      constant Modelica_Blocks_Interfaces_RealOutput Q_flow(unit = "W") = 0.0
                                                                             "Heat flow from port_a to port_b as output signal";
    protected
      record port_a_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_a_rec;
    public
      port_a_rec port_a;
    protected
      record port_b_rec
        Modelica.SIunits.Temperature T
                                      "Port temperature";
        constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                           "Heat flow rate (positive if flowing from outside into the component)";
      end port_b_rec;
    public
      port_b_rec port_b;
    end heaFloSen_rec;
  public
    heaFloSen_rec heaFloSen;
    constant Boolean use_C_flow = false
                                       "Set to true to enable input connector for trace substance";
  protected
    record heatPort_rec
      Modelica.SIunits.Temperature T
                                    "Port temperature";
      constant Modelica.SIunits.HeatFlowRate Q_flow = 0.0
                                                         "Heat flow rate (positive if flowing from outside into the component)";
    end heatPort_rec;
  public
    heatPort_rec heatPort;
  protected
    record dynBal_rec
      constant Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                              "Type of energy balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                            "Type of mass balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics substanceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                                 "Type of independent mass fraction balance: dynamic (3 initialization options) or steady state";
      constant Modelica.Fluid.Types.Dynamics traceDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
                                                                                                             "Type of trace substance balance: dynamic (3 initialization options) or steady state";
      constant Real p_start(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                                 "Start value of pressure";
      constant Real T_start(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                        "Start value of temperature";
      constant Real 'X_start[1]'(nominal = 0.1, quantity = "SimpleLiquidWater", min = 0.0, max = 1.0) = 1.0
                                                                                                           "Start value of mass fractions m_i/m";
      constant Real mSenFac(min = 1.0) = 1.0
                                            "Factor for scaling the sensible thermal mass of the volume";
      constant Boolean simplify_mWat_flow = true
                                                "Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero. Used only if Medium.nX > 1";
      constant Integer nPorts = 3
                                 "Number of ports";
      constant Boolean use_mWat_flow = false
                                            "Set to true to enable input connector for moisture mass flow rate";
      constant Boolean use_C_flow = false
                                         "Set to true to enable input connector for trace substance";
      constant Modelica_Blocks_Interfaces_RealInput Q_flow(unit = "W") = 0.0
                                                                            "Sensible plus latent heat flow rate transferred into the medium";
      Modelica_Blocks_Interfaces_RealOutput hOut(unit = "J/kg")
                                                               "Leaving specific enthalpy of the component";
      Modelica_Blocks_Interfaces_RealOutput UOut(unit = "J")
                                                            "Internal energy of the component";
      constant Modelica_Blocks_Interfaces_RealOutput mOut(unit = "kg", min = 0.0) = 9.95586
                                                                                           "Mass of the component";
    protected
      record 'ports[1]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[1]_rec';
    public
      'ports[1]_rec' 'ports[1]';
    protected
      record 'ports[2]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[2]_rec';
    public
      'ports[2]_rec' 'ports[2]';
    protected
      record 'ports[3]_rec'
        Real m_flow(unit = "kg/s", quantity = "MassFlowRate.SimpleLiquidWater", min = -100000.0, max = 100000.0)
                                                                                                                "Mass flow rate from the connection point into the component";
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Thermodynamic pressure in the connection point";
        Real h_outflow(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -10000000000.0, max = 10000000000.0)
                                                                                                                                  "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'ports[3]_rec';
    public
      'ports[3]_rec' 'ports[3]';
    protected
      record medium_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0) = 101325.0
                                                                                                                          "Absolute pressure of medium";
        Real h(unit = "J/kg", quantity = "SpecificEnergy")
                                                          "Specific enthalpy of medium";
        constant Real d(unit = "kg/m3", displayUnit = "g/cm3", nominal = 1.0, quantity = "Density", min = 0.0, max = 100000.0) = 995.586
                                                                                                                                        "Density of medium";
        Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                  "Temperature of medium";
        constant Real 'X[1]'(nominal = 0.1, quantity = "MassFraction", min = 0.0, max = 1.0) = 1.0
                                                                                                  "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real u(unit = "J/kg", nominal = 1000000.0, quantity = "SpecificEnergy", min = -100000000.0, max = 100000000.0)
                                                                                                                      "Specific internal energy of medium";
        constant Real R(unit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity", min = 0.0, max = 10000000.0) = 0
                                                                                                                                "Gas constant (of mixture if applicable)";
        constant Real MM(unit = "kg/mol", nominal = 0.032, quantity = "MolarMass", min = 0.001, max = 0.25) = 0.018015268
                                                                                                                         "Molar mass (of mixture or single fluid)";
      protected
        record state_rec
          constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                               "Absolute pressure of medium";
          Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0)
                                                                                                                                    "Temperature of medium";
        end state_rec;
      public
        state_rec state;
        constant Boolean preferredMediumStates = false
                                                      "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
        constant Boolean standardOrderComponents = true
                                                       "If true, and reducedX = true, the last element of X will be computed from the other ones";
        Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC
                                                                       "Temperature of medium in [degC]";
        constant Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar = 1.01325
                                                                                     "Absolute pressure of medium in [bar]";
      end medium_rec;
    public
      medium_rec medium;
      parameter Modelica.SIunits.Energy _U_start = 833106.3648;
      Modelica.SIunits.Energy U(nominal = 100000.0,start = _U_start, fixed=true)
                                                                                "Internal energy of fluid";
      constant Modelica.SIunits.Mass m = 9.95586
                                                "Mass of fluid";
      constant Real m_der(unit = "kg/s") = 0.0
                                              "der(Mass of fluid)";
      constant Modelica.SIunits.MassFlowRate mb_flow = 0.0
                                                          "Mass flows across boundaries";
      Modelica.SIunits.EnthalpyFlowRate Hb_flow
                                               "Enthalpy flow across boundaries or energy source/sink";
      constant Modelica.SIunits.Volume fluidVolume = 0.01
                                                         "Volume";
      constant Modelica.SIunits.HeatCapacity CSen = 0.0
                                                       "Aditional heat capacity for implementing mFactor";
      Real 'ports_H_flow[1]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
      Real 'ports_H_flow[2]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
      Real 'ports_H_flow[3]'(unit = "W", nominal = 1000.0, quantity = "EnthalpyFlowRate", min = -100000000.0, max = 100000000.0);
      constant Modelica.SIunits.SpecificHeatCapacity cp_default = 4184
                                                                      "Heat capacity, to compute additional dry mass";
      constant Modelica.SIunits.Density rho_start = 995.586
                                                           "Density, used to compute fluid mass";
      constant Boolean computeCSen = false;
    protected
      record state_default_rec
        constant Real p(unit = "Pa", displayUnit = "bar", nominal = 100000.0, quantity = "Pressure", min = 0.0, max = 100000000.0) = 101325.0
                                                                                                                                             "Absolute pressure of medium";
        constant Real T(unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 1.0, max = 10000.0) = 293.15
                                                                                                                                                    "Temperature of medium";
      end state_default_rec;
    public
      state_default_rec state_default;
      constant Modelica.SIunits.Density rho_default = 995.586
                                                             "Density, used to compute fluid mass";
      constant Modelica.SIunits.SpecificEnthalpy hStart = 83680.0
                                                                 "Start value for specific enthalpy";
      constant Boolean _simplify_mWat_flow = false
                                                  "If true, then port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero, and equations are simplified";
      constant Modelica_Blocks_Interfaces_RealInput mWat_flow_internal(unit = "kg/s") = 0
                                                                                         "Needed to connect to conditional connector";
    end dynBal_rec;
  public
    dynBal_rec dynBal annotation(Dialog);
  end MixingVolume_rec;
public
  MixingVolume_rec MixingVolume annotation(Dialog);
  parameter Real _u_cHP_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_cHP(min = 0.0, max = 1.0, start = _u_cHP_start)
  annotation (Placement(transformation(extent={{-114,65},{-94,85}})));
  parameter Real _u_pump_cHP_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_pump_cHP(start = _u_pump_cHP_start)
  annotation (Placement(transformation(extent={{-114,40},{-94,60}})));
  parameter Real _u_CondensingBoiler_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_CondensingBoiler(min = 0.0, max = 1.0, start = _u_CondensingBoiler_start)
  annotation (Placement(transformation(extent={{-114,15},{-94,35}})));
  parameter Real _u_pump_CondensingBoiler_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_pump_CondensingBoiler(start = _u_pump_CondensingBoiler_start)
  annotation (Placement(transformation(extent={{-114,-10},{-94,10}})));
  parameter Real _u_ImmersionHeater_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_ImmersionHeater(start = _u_ImmersionHeater_start)
  annotation (Placement(transformation(extent={{-114,-35},{-94,-15}})));
  parameter Real _u_heat_power_demand_production_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_heat_power_demand_production(start = _u_heat_power_demand_production_start)
  annotation (Placement(transformation(extent={{-114,-60},{-94,-40}})));
  parameter Real _u_electric_power_demand_production_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput u_electric_power_demand_production(start = _u_electric_power_demand_production_start)
  annotation (Placement(transformation(extent={{-114,-85},{-94,-65}})));
  Modelica.Blocks.Interfaces.RealOutput gas_power_consumption
  annotation (Placement(transformation(extent={{100,14},{140,54}})));
  Modelica.Blocks.Interfaces.RealOutput electric_power_consumption
  annotation (Placement(transformation(extent={{100,-53},{140,-13}})));
public
  parameter String fmi_instanceName="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  parameter String fmi_resourceLocation="file:///"+ModelicaServices.ExternalReferences.loadResource("modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/resources")
  annotation (Dialog(tab="FMI", group="Instantiation"));
protected
  constant Integer fmi_NumberOfEventIndicators = 86;
  Real fmi_z[fmi_NumberOfEventIndicators] "Event indicators";
  Boolean fmi_z_positive[fmi_NumberOfEventIndicators](each start=false, fixed=true);
  fmi_Functions.fmiModel fmi;
  parameter Real zeroOffset = 0; //will fix in later implementations
  Boolean fmi_NewStates;
  Boolean fmi_StepEvent;
  Boolean fmi_DiscreteInputChanged;
  Boolean fmi_iterationConverged(start=false, fixed=true);
  Integer fmi_NextMode;
  Boolean fmi_flip(start=false, fixed=true);
  Real fmi_TNext(start=1e37, fixed=true);
  Real myTime;
  parameter Real myTimeStart(fixed=false);
  Boolean _first(start=true);
  parameter Boolean _startValuesNotSet(fixed=false,start=true);
  Real fmi_dummy;
package fmi_Functions
    class fmiModel
      extends ExternalObject;
      function constructor "Initialize FMI model"
        extends Modelica.Icons.Function;
        input String instanceName;
        input Boolean loggingOn;
        input String resourceLocation;
        output fmiModel fmi;
        external"C" fmi = ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiInstantiateModel2(instanceName, loggingOn, resourceLocation)
        annotation(Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_Instantiate_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_Instantiate_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0BLogger(fmi2ComponentEnvironment componentEnvironment, fmi2String instanceName, fmi2Status status,
  fmi2String category, fmi2String message, ...) {
  char msg[4096];
  char buf[4096];
  va_list ap;
  int len;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len < 4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmi2Fatal:
      ModelicaMessage(\"[fmi2Fatal]: \");
      break;
    case fmi2Error:
      ModelicaMessage(\"[fmi2Error]: \");
      break;
    case fmi2Discard:
      ModelicaMessage(\"[fmi2Discard]: \");
      break;
    case fmi2Warning:
      ModelicaMessage(\"[fmi2Warning]: \");
      break;
    case fmi2OK:
      ModelicaMessage(\"[fmi2OK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiInstantiateModel2(const char*instanceName, fmi2Boolean loggingOn, fmi2String resourceLocation) {
  static fmi2CallbackFunctions funcs = {&ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0BLogger, &calloc, &free, NULL, NULL};
  struct dy_fmi2Extended* res;
  res = calloc(1, sizeof(struct dy_fmi2Extended));
  if (res!=0) {
    if (!(res->hInst=LoadLibraryW(L\"ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B.dll) failed!\");
      return 0;
    }
    if (!(res->dyFmiInstantiate=(fmi2InstantiateFunc)GetProcAddress(res->hInst,\"fmi2Instantiate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Instantiate!\");
      return 0;
    }
    if (!(res->dyFmiFreeInstance=(fmi2FreeInstanceFunc)GetProcAddress(res->hInst,\"fmi2FreeInstance\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeInstance!\");
      return 0;
    }
    if (!(res->dyFmiSetupExperiment=(fmi2SetupExperimentFunc)GetProcAddress(res->hInst,\"fmi2SetupExperiment\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetupExperiment!\");
      return 0;
    }
    if (!(res->dyFmiEnterInitializationMode=(fmi2EnterInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2EnterInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiExitInitializationMode=(fmi2ExitInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2ExitInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2ExitInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiTerminate=(fmi2TerminateFunc)GetProcAddress(res->hInst,\"fmi2Terminate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Terminate!\");
      return 0;
    }
    if (!(res->dyFmiReset=(fmi2ResetFunc)GetProcAddress(res->hInst,\"fmi2Reset\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Reset!\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmi2SetRealFunc)GetProcAddress(res->hInst,\"fmi2SetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmi2GetRealFunc)GetProcAddress(res->hInst,\"fmi2GetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmi2SetIntegerFunc)GetProcAddress(res->hInst,\"fmi2SetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmi2GetIntegerFunc)GetProcAddress(res->hInst,\"fmi2GetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmi2SetBooleanFunc)GetProcAddress(res->hInst,\"fmi2SetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmi2GetBooleanFunc)GetProcAddress(res->hInst,\"fmi2GetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmi2SetDebugLoggingFunc)GetProcAddress(res->hInst,\"fmi2SetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetDebugLogging!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmi2SetStringFunc)GetProcAddress(res->hInst,\"fmi2SetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmi2GetStringFunc)GetProcAddress(res->hInst,\"fmi2GetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetString!\");
      return 0;
    }
    if (!(res->dyFmiSetContinuousStates=(fmi2SetContinuousStatesFunc)GetProcAddress(res->hInst,\"fmi2SetContinuousStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetContinuousStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiSetContinuousStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetContinuousStates=(fmi2GetContinuousStatesFunc)GetProcAddress(res->hInst,\"fmi2GetContinuousStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetContinuousStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetContinuousStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiSetTime=(fmi2SetTimeFunc)GetProcAddress(res->hInst,\"fmi2SetTime\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetTime!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiSetTime\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiCompletedIntegratorStep=(fmi2CompletedIntegratorStepFunc)GetProcAddress(res->hInst,\"fmi2CompletedIntegratorStep\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2CompletedIntegratorStep!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiCompletedIntegratorStep\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiEnterEventMode=(fmi2EnterEventModeFunc)GetProcAddress(res->hInst,\"fmi2EnterEventMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterEventMode!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiEnterEventMode\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiNewDiscreteStates=(fmi2NewDiscreteStatesFunc)GetProcAddress(res->hInst,\"fmi2NewDiscreteStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2NewDiscreteStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiNewDiscreteStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiEnterContinuousTimeMode=(fmi2EnterContinuousTimeModeFunc)GetProcAddress(res->hInst,\"fmi2EnterContinuousTimeMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterContinuousTimeMode!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiEnterContinuousTimeMode\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetDerivatives=(fmi2GetDerivativesFunc)GetProcAddress(res->hInst,\"fmi2GetDerivatives\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDerivatives!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetDerivatives\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetEventIndicators=(fmi2GetEventIndicatorsFunc)GetProcAddress(res->hInst,\"fmi2GetEventIndicators\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetEventIndicators!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetEventIndicators\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetDirectionalDerivative=(fmi2GetDirectionalDerivativeFunc)GetProcAddress(res->hInst,\"fmi2GetDirectionalDerivative\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDirectionalDerivative!\");
      return 0;
    }
    if (!(res->dyFmiGetFMUstate=(fmi2GetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2GetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSetFMUstate=(fmi2SetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiFreeFMUstate=(fmi2FreeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2FreeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeFMUstate!\");
      return 0;
    }
    res->m=res->dyFmiInstantiate(instanceName, fmi2ModelExchange, \"{bab10a0d-6240-4172-852e-f91fd1ebb696}\",resourceLocation, &funcs, fmi2False, loggingOn);
    if (0==res->m) {free(res);res=0;ModelicaError(\"InstantiateModel failed\");}
    else {res->dyTriggered=0;res->dyTime=res->dyLastTime=-1e37;res->discreteInputChanged=1;res->currentMode=dyfmi2InstantiationMode;res->dyLastStepTime=0;res->dyFMUstate=NULL;}
  }
  return res;
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
      end constructor;

      function destructor "Release storage of FMI model"
        extends Modelica.Icons.Function;
        input fmiModel fmi;
        external"C"
                   ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiFreeModelInstance2(fmi);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_Free_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_Free_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiFreeModelInstance2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    if(a->dyFMUstate)
    a->dyFmiFreeFMUstate(a->m, &a->dyFMUstate);
    /*a->dyFmiSetDebugLogging(a->m,fmi2True,0,NULL);*/
    a->dyFmiTerminate(a->m);
    a->dyFmiFreeInstance(a->m);
    FreeLibrary(a->hInst);
    free(a);
  }
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
      end destructor;
    end fmiModel;

    function  fmiSetTime
    input fmiModel fmi;
    input Real ti;
    external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetTime2(fmi, ti);
    annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetTime_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetTime_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetTime2(void*m, double ti) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(ti > a->dyTime || (a->currentMode == dyfmi2EventMode && ti==a->dyTime && !isModelicaEvent())){
      a->dyTime=ti;
      if(a->currentMode == dyfmi2EventMode){
        status = a->dyFmiEnterContinuousTimeMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterContinuousTimeMode failed!\");
        a->currentMode = dyfmi2ContinuousTimeMode;
      }
      status=a->dyFmiSetTime(a->m, ti);
    }else if(ti < a->dyTime && a->currentMode == dyfmi2ContinuousTimeMode){
       a->dyTime=ti;
       status=a->dyFmiSetTime(a->m, ti);
    }else{
       status=fmi2OK;
    }
  }
  if (status!=fmi2OK ) ModelicaError(\"SetTime failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B",__Dymola_IdemPotent=true);
    end fmiSetTime;

    function fmiSetContinuousStates
    input fmiModel fmi;
    input Real x[:];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetContinuousStates2(
       fmi,
       x,
       size(x, 1));
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetContinuousStates_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetContinuousStates_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetContinuousStates2(void*m, const double*x, size_t nx) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
     status=a->dyFmiSetContinuousStates(a->m, x, nx);
    }else{
     status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetContinuousStates failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiSetContinuousStates;

    function  fmiGetContinuousStates
    input fmiModel fmi;
    input Integer nx;
    output Real x[nx];
    input Real preAvailable;
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetContinuousStates2(
        fmi,
        x,
        nx);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetContinuousStates_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetContinuousStates_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetContinuousStates2(void*m, double*x, int nx) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetContinuousStates(a->m, x, nx);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetContinuousStates failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetContinuousStates;

    function  fmiCompletedIntegratorStep
    input fmiModel fmi;
    input Real dummyTime;
    output Real crossing;
      external"C" crossing = ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiCompletedIntegratorStep2(fmi);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_CompletedIntegratorStep_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_CompletedIntegratorStep_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiCompletedIntegratorStep2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status = fmi2Fatal;
  fmi2Boolean enterEventMode = fmi2False;
  fmi2Boolean terminateSimulation = fmi2False;
  if (a) {
    if (a->dyTime>a->dyLastTime) {
      status=a->dyFmiCompletedIntegratorStep(a->m, fmi2True, &enterEventMode, &terminateSimulation);
      if(terminateSimulation == fmi2True) terminate(\"Terminate signaled by FMU after call to fmiCompletedIntegratorStep\");
      a->dyLastTime=a->dyTime;
      if (enterEventMode == fmi2True) a->dyTriggered=1;
    } else status=fmi2OK;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"CompletedIntegratorStep failed\");
  return a->dyTriggered && a->dyTime>=a->dyLastTime;
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiCompletedIntegratorStep;

    function  fmiEnterModelInitialization
    input fmiModel fmi;
    input Real startTime;
    external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiEnterModelInitialization2(fmi, startTime);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiEnterModelInitialization_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiEnterModelInitialization_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiEnterModelInitialization2(void*m, double startTime) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  fmi2Boolean toleranceControlled=fmi2False;
  fmi2Real tolerance=0;
  if (a) {
    if(a->currentMode==dyfmi2InstantiationMode){
      a->dyTime=startTime;
      status=a->dyFmiSetupExperiment(a->m, fmi2False, 0, a->dyTime, fmi2False, 0);
      status=a->dyFmiEnterInitializationMode(a->m);
      a->currentMode=dyfmi2InitializationMode;
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
    }else{
      status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"Initialize failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiEnterModelInitialization;

    function  fmiExitModelInitializationMode
    input fmiModel fmi;
    output Real dummy=1.0;
    external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiExitModelInitializationMode2(fmi);
    annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiExitModelInitializationMode_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiExitModelInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiExitModelInitializationMode2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiExitInitializationMode(a->m);
    a->dyTriggered=0;
    a->dyLastTime=a->dyTime;
    a->currentMode = dyfmi2EventMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiExitModelInitialization failed!\");
  return;
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiExitModelInitializationMode;

    function  fmiUpdateDiscreteStates
    input fmiModel fmi;
    output Integer nextMode;
    output Real tNext;
    output Boolean stateValuesChanged;
    external"C" nextMode = ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiUpdateDiscreteStates2(fmi, tNext, stateValuesChanged);
      annotation(Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_UpdateDiscreteStates_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_UpdateDiscreteStates_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
int ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiUpdateDiscreteStates2(void*m, double* tNext, int* stateValuesChanged){
  struct dy_fmi2Extended*a=m;
  fmi2EventInfo ev;
  fmi2Status status=fmi2Fatal;
  ev.nextEventTime=1e37;
  ev.newDiscreteStatesNeeded=fmi2False;
  ev.valuesOfContinuousStatesChanged=fmi2False;
  ev.nextEventTimeDefined=fmi2False;
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
  status=a->dyFmiNewDiscreteStates(a->m, &ev);
  a->dyTriggered=0;
  a->dyLastTime=a->dyTime;
  a->discreteInputChanged=0;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"EventUpdate failed\");
  if (ev.terminateSimulation){
    terminate(\"Terminate signaled by FMU\");
  }
  if(ev.nextEventTimeDefined==fmi2True){
    *tNext=ev.nextEventTime;
  }else{
    *tNext=1e37;
  }
  *stateValuesChanged = ev.valuesOfContinuousStatesChanged;
  return ev.newDiscreteStatesNeeded;
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiUpdateDiscreteStates;

    function  fmiGetDerivatives
    input fmiModel fmi;
    input Integer nx;
    output Real dx[nx];
    external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetDerivatives2(
    fmi,
      dx,
      nx);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetDerivatives_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetDerivatives_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetDerivatives2(void*m,double*dx,int nx) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDerivatives(a->m, dx, nx);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetDerivatives failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetDerivatives;

    function  fmiGetEventIndicators
    input fmiModel fmi;
    input Integer nz;
    output Real z[nz];
    external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetEventIndicators2(
      fmi,
      z,
      nz);
    annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetEventIndicators_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetEventIndicators_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetEventIndicators2(void*m,double*z,int nz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode || a->currentMode == dyfmi2EventMode){
      status=a->dyFmiGetEventIndicators(a->m, z, nz);
    }else{
      status=fmi2OK;    }
;  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetEventIndicators failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetEventIndicators;

    function fmiReset
      input fmiModel fmi;
      output Boolean resetOK;
      external"C" resetOK = ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiReset2(fmi);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_Reset_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_Reset_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiReset2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiReset(a->m);
    a->currentMode=dyfmi2InstantiationMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiReset failed\");
    return 1.0;
  }
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiReset;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetReal_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetReal;

    function fmiGetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real preAvailable;
      output Real vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetReal_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetRealwf;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      external"C"
                 ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetReal_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      input Real preAvailable;
      output Real postAvailable=preAvailable;
      external"C"
                 ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetReal_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealwf;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetInteger_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetInteger;

    function fmiGetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Integer vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetInteger_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetInteger_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetIntegerwf;

    function fmiSetInteger
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetInteger_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed in SetInteger\");
      for( i = 0; i < nrefs; ++i){
        if(oldVals[i] != vals[i]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetBoolean_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetBoolean;

    function fmiGetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Boolean vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetBoolean_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetBooleanwf;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetBoolean_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals, int* dummy, int* oldVals) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(oldVals));
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed in SetBoolean\");
      for(j=nr-1;j>=0;j--){
        oldVals[j]=((fmi2Boolean*)(oldVals))[j];
        if(oldVals[j] != dummy[j]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetString
      input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetString_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_SetString_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSetString2(void*m, const int*refs, size_t nrefs,const fmi2String vals[]) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    a->discreteInputChanged = fmi2True;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetString failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiGetDirectionalDerivative
      input fmiModel fmi;
      input Integer z_refs[:];
      input Integer v_refs[:];
      input Real dv[size(v_refs, 1)];
      output Real dz[size(z_refs, 1)];
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetDirectionalDerivative2(
        fmi,
        z_refs,
        size(z_refs, 1),
        v_refs,
        size(v_refs, 1),
        dv,
        dz);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetDirectionalDerivative2_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetDirectionalDerivative2_C 1
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_GetDirectionalDerivative2(void*m, const int* zref, size_t nzr, const int* vrefs, size_t nvr, const double *dv, double *dz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDirectionalDerivative(a->m, zref, nzr, vrefs, nvr, dv, dz);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetDirectionalDerivative failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiGetDirectionalDerivative;

    function CheckIfDiscreteValueSet
      input fmiModel fmi;
      input Real dummyTime;
      input Real realInputs[:];
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      input Integer realInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Real dummyRealOutputs[:];
      input Boolean dummyBooleanOutputs[:];
      input Integer dummyIntegerOutputs[:];
      output Real DiscreteInputSet;
    algorithm
      fmiSetReal(fmi, realInputValueReferences, realInputs);
      fmiSetBoolean(fmi, booleanInputValueReferences, booleanInputs);
      fmiSetInteger(fmi, integerInputValueReferences, integerInputs);
      DiscreteInputSet := fmiCheckIfDiscreteValueSet(fmi);
      annotation(LateInline=true);
    end CheckIfDiscreteValueSet;

    function fmiCheckIfDiscreteValueSet
      input fmiModel fmi;
      output Real DiscreteInputSet;
      external "C" DiscreteInputSet = ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiCheckIfDiscreteValueSet2(fmi);
      annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiCheckIfDiscreteValueSet_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiCheckIfDiscreteValueSet_C 1
#include \"FMI/fmi2Import.h\"
double ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiCheckIfDiscreteValueSet2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    return a->discreteInputChanged;
  }
  ModelicaError(\"fmiCheckIfDiscreteValueSet2 failed!\");
  return 0;
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiCheckIfDiscreteValueSet;

    function GetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetRealScalar(fmi,outputValueReference[1]);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable, LateInline=true);
    end GetRealVariable;

    function derGetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Real derRealInputs[:];
      input Real derStates[:];
      input Real derLinearOffsets;
      output Real derOutputVariable;
    protected
      Real dummy[1];
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //setString(fmi,stringInputValueReferences,stringInputs);
      dummy:=fmiGetDirectionalDerivative(fmi, outputValueReference,  cat(1,realInputValueReferences,statesValueRefernces), cat(1,derRealInputs,derStates));
      derOutputVariable:=dummy[1]+derLinearOffsets;
      annotation(LateInline=true);
    end derGetRealVariable;

    function GetEventIndicators
      input fmiModel fmi;
      input Integer nz;
      output Real z[nz];
      input Real dummyTime;
      input Real realInputs[:];
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputVariableReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      z := fmiGetEventIndicators(fmi, nz);
      annotation(LateInline=true);
    end GetEventIndicators;

    function noHysteresis
      input Real x;
      output Real y;
    algorithm
      y:=x+(if (x < 0) then -1 else 1);
    end noHysteresis;

    function fmiSaveFMUState
      input fmiModel fmi;
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSaveFMUState2(fmi);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSaveFMUState_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSaveFMUState_C 1
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiSaveFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiSaveFMUState;

    function fmiRestoreFMUState
      input fmiModel fmi;
      external"C" ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiRestoreFMUState2(fmi);
        annotation (Header="
#ifndef ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiRestoreFMUState_C
#define ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiRestoreFMUState_C 1
#include \"FMI/fmi2Import.h\"
void ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmiRestoreFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
}
#endif", Library="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B", LibraryDirectory="modelica://ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu/Resources/Library/FMU/ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B/binaries", __Dymola_CriticalRegion="ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B");
    end fmiRestoreFMUState;

    function  setTimeAndStates
      input fmiModel fmu;
      input Real Time;
      input Real States[:];
      input Real dummy;
      output Real tOut=Time;
    algorithm
      fmiSetTime(fmu, Time);
      fmiSetContinuousStates(fmu,States);
      annotation(derivative(noDerivative=dummy,noDerivative=States)=dTS);
    end setTimeAndStates;

    function  dTS
      input fmiModel fmu;
      input Real Time;
      input Real States[:];
      input Real dummy;
      input Real dTime;
      output Real dt;
    algorithm
      dt:=1;
      annotation(derivative(order=2)=ddTS);
    end dTS;

    function  ddTS
      input fmiModel fmu;
      input Real Time;
      input Real States[:];
      input Real dummy;
      input Real dTime;
      input Real ddTime;
      output Real ddt;
    algorithm
      ddt:=0;
    end ddTS;

    function  from_degC
      input Real degC;
      output Real BaseUnit(unit="K");
    algorithm
      BaseUnit := degC + 273.15;
    end from_degC;

    function  to_degC
      input Real BaseUnit(unit="K");
      output Real degC;
    algorithm
      degC := BaseUnit - 273.15;
    end to_degC;
end fmi_Functions;
algorithm
  when initial() then
    if _first then
      _first := false;
      fmi := fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn, fmi_resourceLocation);
    end if;
  end when;
initial algorithm
  if _startValuesNotSet then
  fmi_Functions.fmiSetReal(fmi, {369099040, 33554434, 369099206, 33554437, 33554438, 33554439, 33554440, 33554441, 33554443, 33554445}, {condensingBoiler.port_a._m_flow_start, condensingBoiler.volEva.dynBal._U_start, cHP.port_a._m_flow_start, cHP._Q_s_start, cHP.vol.dynBal._U_start, pipe_simple_chp.'vol[1]'.dynBal._U_start, pipe_simple_boiler.'vol[1]'.dynBal._U_start, pump_simple_controlled_cHP.vol.dynBal._U_start, pump_simple_controlled_Boiler.vol.dynBal._U_start, MixingVolume.dynBal._U_start});
  fmi_Functions.fmiSetReal(fmi, {352321536, 352321537, 352321538, 352321539, 352321540, 352321541, 352321542}, {_u_cHP_start, _u_pump_cHP_start, _u_CondensingBoiler_start, _u_pump_CondensingBoiler_start, _u_ImmersionHeater_start, _u_heat_power_demand_production_start, _u_electric_power_demand_production_start});
  fmi_Functions.fmiEnterModelInitialization(fmi, time);
  _startValuesNotSet :=false;
  end if;
  myTimeStart := time;
initial equation
equation
  when not initial() then
    fmi_dummy = fmi_Functions.fmiExitModelInitializationMode(fmi);
  {condensingBoiler.tableEfficiency.tableID.id, cHP.Tableefficency_P_th.tableID.id, cHP.Tableefficency_P_el.tableID.id, cHP.Tableefficency_P_gs.tableID.id} = fmi_Functions.fmiGetIntegerwf(fmi, {100663633, 100663884, 100663907, 100663923}, integer(fmi_dummy));
  end when;
  myTime = fmi_Functions.setTimeAndStates(fmi, time, {watertank_warm.'vol[1]'.dynBal.U, watertank_warm.'vol[2]'.dynBal.U, condensingBoiler.volEva.dynBal.U, expansion_tank.m, expansion_tank.H, cHP.Q_s, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.vol.dynBal.U, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fmi_dummy);
  fmi_StepEvent = fmi_Functions.fmiCompletedIntegratorStep(fmi, myTime)>0.5;
  fmi_DiscreteInputChanged= fmi_Functions.CheckIfDiscreteValueSet(fmi, myTime, {u_cHP, u_pump_cHP, u_CondensingBoiler, u_pump_CondensingBoiler, u_ImmersionHeater, u_heat_power_demand_production, u_electric_power_demand_production}, fill(false,0), fill(0,0), {352321536, 352321537, 352321538, 352321539, 352321540, 352321541, 352321542}, fill(0,0), fill(0,0), {gas_power_consumption, electric_power_consumption}, fill(false,0), fill(0,0))  > 0.5;
  fmi_flip = ( if ( fmi_DiscreteInputChanged or not pre(fmi_iterationConverged)) then not pre(fmi_flip) else pre(fmi_flip));
  fmi_z  = fmi_Functions.GetEventIndicators(fmi, fmi_NumberOfEventIndicators, myTime, {u_cHP, u_pump_cHP, u_CondensingBoiler, u_pump_CondensingBoiler, u_ImmersionHeater, u_heat_power_demand_production, u_electric_power_demand_production}, fill(false,0), fill(0,0), {352321536, 352321537, 352321538, 352321539, 352321540, 352321541, 352321542}, fill(0,0), fill(0,0));
  for i in 1:size(fmi_z,1) loop
    fmi_z_positive[i] = fmi_Functions.noHysteresis(fmi_z[i]) > 0;
  end for;
  when cat(1, change(fmi_z_positive), {time>=pre(fmi_TNext), fmi_flip, not fmi_flip, fmi_StepEvent}) then
    (fmi_NextMode, fmi_TNext, fmi_NewStates) =  fmi_Functions.fmiUpdateDiscreteStates(fmi);
    fmi_iterationConverged = if fmi_NextMode == 0 then true else false;
{pump_simple_controlled_cHP.greaterThreshold.y, pump_simple_controlled_Boiler.greaterThreshold.y} = fmi_Functions.fmiGetBooleanwf(fmi, {369099821, 369100030}, if initial() then integer(myTimeStart) else integer(myTime));
  end when;
initial equation
  watertank_warm.'vol[1]'.dynBal.U = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {33554432});
  watertank_warm.'vol[2]'.dynBal.U = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {33554433});
  condensingBoiler.tableEfficiency.tableOnFileRead = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {100663634});
  expansion_tank.m = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {33554435});
  expansion_tank.H = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {33554436});
  cHP.Tableefficency_P_th.tableOnFileRead = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {100663885});
  cHP.Tableefficency_P_el.tableOnFileRead = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {100663908});
  cHP.Tableefficency_P_gs.tableOnFileRead = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {100663924});
  pump_simple_controlled_cHP.PID.I.y = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {33554442});
  pump_simple_controlled_Boiler.PID.I.y = fmi_Functions.GetRealVariable(fmi, myTimeStart, fill(0.0,0), fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), fill(0,0), {33554444});
equation
  if initial() then
    der(watertank_warm.'vol[1]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, u_ImmersionHeater, u_heat_power_demand_production, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 352321540, 352321541, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202560});
  else
    der(watertank_warm.'vol[1]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler, u_ImmersionHeater, u_heat_power_demand_production}, fill(0.0,0), {watertank_warm.'vol[1]'.dynBal.U, watertank_warm.'vol[2]'.dynBal.U, condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539, 352321540, 352321541}, fill(0,0), {33554432, 33554433, 33554434, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202560});
  end if;
  if initial() then
    der(watertank_warm.'vol[2]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202561});
  else
    der(watertank_warm.'vol[2]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler}, fill(0.0,0), {watertank_warm.'vol[1]'.dynBal.U, watertank_warm.'vol[2]'.dynBal.U, condensingBoiler.volEva.dynBal.U, expansion_tank.m, expansion_tank.H, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539}, fill(0,0), {33554432, 33554433, 33554434, 33554435, 33554436, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202561});
  end if;
  if initial() then
    der(condensingBoiler.volEva.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_CondensingBoiler, u_pump_CondensingBoiler, pump_simple_controlled_Boiler.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554440, 352321538, 352321539, 33554443, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202562});
  else
    der(condensingBoiler.volEva.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_CondensingBoiler, u_pump_CondensingBoiler}, fill(0.0,0), {condensingBoiler.volEva.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_Boiler.vol.dynBal.U, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321538, 352321539}, fill(0,0), {33554434, 33554440, 33554443, 33554444, 33554445}, fill(0,0), fill(0,0), {587202562});
  end if;
  if initial() then
    der(expansion_tank.m) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202563});
  else
    der(expansion_tank.m) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler}, fill(0.0,0), {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539}, fill(0,0), {33554434, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202563});
  end if;
  if initial() then
    der(expansion_tank.H) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202564});
  else
    der(expansion_tank.H) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler}, fill(0.0,0), {watertank_warm.'vol[2]'.dynBal.U, condensingBoiler.volEva.dynBal.U, expansion_tank.m, expansion_tank.H, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539}, fill(0,0), {33554433, 33554434, 33554435, 33554436, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202564});
  end if;
  if initial() then
    der(cHP.Q_s) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {cHP.Q_s, cHP.vol.dynBal.U, u_cHP, pipe_simple_chp.'vol[1]'.dynBal.U, u_pump_cHP, pump_simple_controlled_cHP.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554437, 33554438, 352321536, 33554439, 352321537, 33554441, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202565});
  else
    der(cHP.Q_s) = fmi_Functions.GetRealVariable(fmi, myTime, {u_cHP, u_pump_cHP}, fill(0.0,0), {cHP.Q_s, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_cHP.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321536, 352321537}, fill(0,0), {33554437, 33554438, 33554439, 33554441, 33554442, 33554445}, fill(0,0), fill(0,0), {587202565});
  end if;
  if initial() then
    der(cHP.vol.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {cHP.Q_s, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, u_pump_cHP, pump_simple_controlled_cHP.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554437, 33554438, 33554439, 352321537, 33554441, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202566});
  else
    der(cHP.vol.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP}, fill(0.0,0), {cHP.Q_s, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_cHP.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537}, fill(0,0), {33554437, 33554438, 33554439, 33554441, 33554442, 33554445}, fill(0,0), fill(0,0), {587202566});
  end if;
  if initial() then
    der(pipe_simple_chp.'vol[1]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202567});
  else
    der(pipe_simple_chp.'vol[1]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler}, fill(0.0,0), {watertank_warm.'vol[2]'.dynBal.U, condensingBoiler.volEva.dynBal.U, expansion_tank.m, expansion_tank.H, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539}, fill(0,0), {33554433, 33554434, 33554435, 33554436, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202567});
  end if;
  if initial() then
    der(pipe_simple_boiler.'vol[1]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202568});
  else
    der(pipe_simple_boiler.'vol[1]'.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler}, fill(0.0,0), {watertank_warm.'vol[2]'.dynBal.U, condensingBoiler.volEva.dynBal.U, expansion_tank.m, expansion_tank.H, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539}, fill(0,0), {33554433, 33554434, 33554435, 33554436, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202568});
  end if;
  if initial() then
    der(pump_simple_controlled_cHP.vol.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, u_pump_cHP, pump_simple_controlled_cHP.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554438, 33554439, 352321537, 33554441, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202569});
  else
    der(pump_simple_controlled_cHP.vol.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP}, fill(0.0,0), {cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_cHP.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537}, fill(0,0), {33554438, 33554439, 33554441, 33554442, 33554445}, fill(0,0), fill(0,0), {587202569});
  end if;
  if initial() then
    der(pump_simple_controlled_cHP.PID.I.y) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, u_pump_cHP, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554438, 33554439, 352321537, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202570});
  else
    der(pump_simple_controlled_cHP.PID.I.y) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP}, fill(0.0,0), {cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537}, fill(0,0), {33554438, 33554439, 33554442, 33554445}, fill(0,0), fill(0,0), {587202570});
  end if;
  if initial() then
    der(pump_simple_controlled_Boiler.vol.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_CondensingBoiler, pump_simple_controlled_Boiler.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554440, 352321539, 33554443, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202571});
  else
    der(pump_simple_controlled_Boiler.vol.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_CondensingBoiler}, fill(0.0,0), {condensingBoiler.volEva.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_Boiler.vol.dynBal.U, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321539}, fill(0,0), {33554434, 33554440, 33554443, 33554444, 33554445}, fill(0,0), fill(0,0), {587202571});
  end if;
  if initial() then
    der(pump_simple_controlled_Boiler.PID.I.y) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554440, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202572});
  else
    der(pump_simple_controlled_Boiler.PID.I.y) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_CondensingBoiler}, fill(0.0,0), {condensingBoiler.volEva.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321539}, fill(0,0), {33554434, 33554440, 33554444, 33554445}, fill(0,0), fill(0,0), {587202572});
  end if;
  if initial() then
    der(MixingVolume.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_pump_CondensingBoiler, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 33554439, 33554440, 352321537, 352321539, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {587202573});
  else
    der(MixingVolume.dynBal.U) = fmi_Functions.GetRealVariable(fmi, myTime, {u_pump_cHP, u_pump_CondensingBoiler}, fill(0.0,0), {watertank_warm.'vol[1]'.dynBal.U, condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321537, 352321539}, fill(0,0), {33554432, 33554434, 33554438, 33554439, 33554440, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {587202573});
  end if;
  if initial() then
    gas_power_consumption = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, u_cHP, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_CondensingBoiler, u_pump_CondensingBoiler, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_Boiler.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 352321536, 33554439, 33554440, 352321537, 352321538, 352321539, 33554441, 33554443, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544320});
  else
    gas_power_consumption = fmi_Functions.GetRealVariable(fmi, myTime, {u_cHP, u_pump_cHP, u_CondensingBoiler, u_pump_CondensingBoiler}, fill(0.0,0), {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.vol.dynBal.U, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321536, 352321537, 352321538, 352321539}, fill(0,0), {33554434, 33554438, 33554439, 33554440, 33554441, 33554442, 33554443, 33554444, 33554445}, fill(0,0), fill(0,0), {335544320});
  end if;
  if initial() then
    electric_power_consumption = fmi_Functions.GetRealVariable(fmi, myTimeStart, {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, u_cHP, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, u_pump_cHP, u_CondensingBoiler, u_pump_CondensingBoiler, u_ImmersionHeater, u_electric_power_demand_production, pump_simple_controlled_cHP.vol.dynBal.U, MixingVolume.dynBal.U}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {33554434, 33554438, 352321536, 33554439, 33554440, 352321537, 352321538, 352321539, 352321540, 352321542, 33554441, 33554445}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544321});
  else
    electric_power_consumption = fmi_Functions.GetRealVariable(fmi, myTime, {u_cHP, u_pump_cHP, u_CondensingBoiler, u_pump_CondensingBoiler, u_ImmersionHeater, u_electric_power_demand_production}, fill(0.0,0), {condensingBoiler.volEva.dynBal.U, cHP.vol.dynBal.U, pipe_simple_chp.'vol[1]'.dynBal.U, pipe_simple_boiler.'vol[1]'.dynBal.U, pump_simple_controlled_cHP.vol.dynBal.U, pump_simple_controlled_cHP.PID.I.y, pump_simple_controlled_Boiler.PID.I.y, MixingVolume.dynBal.U}, fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321536, 352321537, 352321538, 352321539, 352321540, 352321542}, fill(0,0), {33554434, 33554438, 33554439, 33554440, 33554441, 33554442, 33554444, 33554445}, fill(0,0), fill(0,0), {335544321});
  end if;
{watertank_warm.port_a.m_flow, watertank_warm.port_a.h_outflow, watertank_warm.port_b.m_flow, watertank_warm.port_b.h_outflow, watertank_warm.'heaPorVol[1]'.T, watertank_warm.'heaPorVol[1]'.Q_flow, watertank_warm.'heaPorVol[2]'.T, watertank_warm.heaPorSid.T, watertank_warm.'vol[1]'.preTem.port.Q_flow, watertank_warm.'vol[1]'.heaFloSen.port_b.Q_flow, watertank_warm.'vol[1]'.dynBal.medium.T, watertank_warm.'vol[1]'.dynBal.medium.u, watertank_warm.'vol[1]'.dynBal.medium.T_degC, watertank_warm.'vol[1]'.dynBal.Hb_flow, watertank_warm.'vol[1]'.dynBal.'ports_H_flow[1]', watertank_warm.'vol[1]'.dynBal.'ports_H_flow[2]', watertank_warm.'vol[2]'.preTem.port.Q_flow, watertank_warm.'vol[2]'.heaFloSen.port_b.Q_flow, watertank_warm.'vol[2]'.dynBal.medium.T, watertank_warm.'vol[2]'.dynBal.medium.u, watertank_warm.'vol[2]'.dynBal.medium.T_degC, watertank_warm.'vol[2]'.dynBal.Hb_flow, watertank_warm.'vol[2]'.dynBal.'ports_H_flow[1]', watertank_warm.'vol[2]'.dynBal.'ports_H_flow[2]', watertank_warm.buo.'heatPort[1]'.Q_flow, watertank_warm.buo.'heatPort[2]'.Q_flow, watertank_warm.buo.'dT[1]', watertank_warm.'conFlu[1]'.Q_flow, watertank_warm.'conFlu[1]'.dT, watertank_warm.'conFlu[1]'.port_b.Q_flow, watertank_warm.'conWal[1]'.Q_flow, watertank_warm.'conWal[1]'.dT, watertank_warm.'conWal[1]'.port_b.Q_flow, watertank_warm.'conWal[2]'.dT, immersionHeater.u, immersionHeater.Q_flow_s.Q_flow, immersionHeater.prescribedHeatFlow.Q_flow, immersionHeater.gain.u, immersionHeater.nStepsLimiter.u_limited, condensingBoiler.port_a.m_flow, condensingBoiler.port_b.m_flow, condensingBoiler.port_b.h_outflow, condensingBoiler.gas_m_flow, condensingBoiler.Q_s, condensingBoiler.tableEfficiency.u, condensingBoiler.tableEfficiency.'y[1]', condensingBoiler.temperature.T, condensingBoiler.volEva.T, condensingBoiler.volEva.heaFloSen.port_b.Q_flow, condensingBoiler.volEva.dynBal.medium.T, condensingBoiler.volEva.dynBal.medium.u, condensingBoiler.volEva.dynBal.medium.T_degC, condensingBoiler.volEva.dynBal.Hb_flow, condensingBoiler.volEva.dynBal.'ports_H_flow[1]', condensingBoiler.volEva.dynBal.'ports_H_flow[2]', condensingBoiler.u, condensingBoiler.P_el, condensingBoiler.P_gs, expansion_tank.port_a.m_flow, expansion_tank.port_a.h_outflow, sum_elec.'u[1]', sum_elec.'u[4]', sum_elec.'u[5]', sum_elec.'u[6]', sum_gas.'u[1]', cHP.port_a.m_flow, cHP.port_b.m_flow, cHP.port_b.h_outflow, cHP.mass_flow_gs, cHP.eta, cHP.temperature.T, cHP.K2degC.Celsius, cHP.vol.T, cHP.vol.heaFloSen.port_b.Q_flow, cHP.vol.dynBal.medium.T, cHP.vol.dynBal.medium.u, cHP.vol.dynBal.medium.T_degC, cHP.vol.dynBal.Hb_flow, cHP.vol.dynBal.'ports_H_flow[1]', cHP.vol.dynBal.'ports_H_flow[2]', cHP.u, cHP.P_el, cHP.P_th, cHP.Tableefficency_P_th.u1, cHP.Tableefficency_P_th.y, cHP.Tableefficency_P_el.'y[1]', cHP.Tableefficency_P_gs.'y[1]', massflow_from_watertank_warm.port_a.m_flow, massflow_from_watertank_warm.port_a.h_outflow, massflow_from_watertank_warm.port_b.m_flow, pipe_simple_chp.port_a.h_outflow, pipe_simple_chp.Q_flow_loss, pipe_simple_chp.'vol[1]'.T, pipe_simple_chp.'vol[1]'.preTem.port.Q_flow, pipe_simple_chp.'vol[1]'.dynBal.medium.T, pipe_simple_chp.'vol[1]'.dynBal.medium.u, pipe_simple_chp.'vol[1]'.dynBal.medium.T_degC, pipe_simple_chp.'vol[1]'.dynBal.Hb_flow, pipe_simple_chp.'vol[1]'.dynBal.'ports_H_flow[1]', pipe_simple_chp.'vol[1]'.dynBal.'ports_H_flow[2]'} = fmi_Functions.fmiGetRealwf(fmi, {637534226, 637534228, 637535557, 637534230, 637534249, 637534250, 637534251, 637534253, 637534288, 637534286, 637534309, 637534311, 905969773, 637534322, 637534325, 637534326, 637534368, 637534366, 637534389, 637534391, 905969853, 637534402, 637534405, 637534406, 637534427, 637534428, 637534434, 637534435, 637534436, 637534437, 637534464, 637534439, 637534440, 637534442, 436207620, 369099026, 369099029, 369099038, 369099037, 369099040, 369099043, 369099045, 905969970, 369099059, 369099061, 369099062, 369099094, 905970025, 369099173, 369099142, 369099144, 905970062, 637534611, 637534614, 637534615, 436207618, 369099169, 369099170, 587202563, 637534641, 369099191, 436207622, 369099192, 369099193, 369099202, 369099206, 369099209, 369099211, 905970140, 905970141, 369099233, 637534690, 905970165, 1174405716, 369099282, 369099284, 905970202, 637534751, 637534754, 637534755, 436207616, 369099309, 637534766, 369099311, 637534768, 905970262, 369099366, 637534838, 637534840, 637534841, 369099392, 637534862, 637534881, 637534956, 369099454, 369099456, 905970374, 637534922, 637534925, 637534926}, if initial() then myTimeStart else myTime);
{pipe_simple_chp.'conWall[1]'.dT, pipe_simple_chp.'conWall[1]'.port_b.T, pipe_simple_chp.'conIns[1]'.dT, pipe_simple_boiler.port_a.h_outflow, pipe_simple_boiler.Q_flow_loss, pipe_simple_boiler.'vol[1]'.T, pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow, pipe_simple_boiler.'vol[1]'.dynBal.medium.T, pipe_simple_boiler.'vol[1]'.dynBal.medium.u, pipe_simple_boiler.'vol[1]'.dynBal.medium.T_degC, pipe_simple_boiler.'vol[1]'.dynBal.Hb_flow, pipe_simple_boiler.'vol[1]'.dynBal.'ports_H_flow[1]', pipe_simple_boiler.'vol[1]'.dynBal.'ports_H_flow[2]', pipe_simple_boiler.'conWall[1]'.dT, pipe_simple_boiler.'conWall[1]'.port_b.T, pipe_simple_boiler.'conIns[1]'.dT, prescribedHeatFlow.Q_flow, prescribedHeatFlow.port.Q_flow, pump_simple_controlled_cHP.port_a.h_outflow, pump_simple_controlled_cHP.u, pump_simple_controlled_cHP.y_actual, pump_simple_controlled_cHP.vol.T, pump_simple_controlled_cHP.vol.heaFloSen.port_b.Q_flow, pump_simple_controlled_cHP.vol.dynBal.medium.T, pump_simple_controlled_cHP.vol.dynBal.medium.u, pump_simple_controlled_cHP.vol.dynBal.medium.T_degC, pump_simple_controlled_cHP.vol.dynBal.Hb_flow, pump_simple_controlled_cHP.vol.dynBal.'ports_H_flow[1]', pump_simple_controlled_cHP.vol.dynBal.'ports_H_flow[2]', pump_simple_controlled_cHP.gainMassFlow.u, pump_simple_controlled_cHP.preSou.V_flow, pump_simple_controlled_cHP.gainMassFlow1.u, pump_simple_controlled_cHP.zeroLimiter.u, pump_simple_controlled_cHP.T_flow, pump_simple_controlled_cHP.T_return, pump_simple_controlled_cHP.PID.u_m, pump_simple_controlled_cHP.PID.y, pump_simple_controlled_cHP.PID.controlError, pump_simple_controlled_cHP.PID.addP.y, pump_simple_controlled_cHP.PID.gainPID.u, pump_simple_controlled_cHP.PID.gainPID.y, pump_simple_controlled_cHP.PID.I.u, pump_simple_controlled_cHP.PID.addI.u3, pump_simple_controlled_cHP.PID.addSat.y, pump_simple_controlled_Boiler.port_a.h_outflow, pump_simple_controlled_Boiler.u, pump_simple_controlled_Boiler.y_actual, pump_simple_controlled_Boiler.vol.T, pump_simple_controlled_Boiler.vol.heaFloSen.port_b.Q_flow, pump_simple_controlled_Boiler.vol.dynBal.medium.T, pump_simple_controlled_Boiler.vol.dynBal.medium.u, pump_simple_controlled_Boiler.vol.dynBal.medium.T_degC, pump_simple_controlled_Boiler.vol.dynBal.Hb_flow, pump_simple_controlled_Boiler.vol.dynBal.'ports_H_flow[1]', pump_simple_controlled_Boiler.vol.dynBal.'ports_H_flow[2]', pump_simple_controlled_Boiler.gainMassFlow.u, pump_simple_controlled_Boiler.preSou.V_flow, pump_simple_controlled_Boiler.gainMassFlow1.u, pump_simple_controlled_Boiler.zeroLimiter.u, pump_simple_controlled_Boiler.T_flow, pump_simple_controlled_Boiler.T_return, pump_simple_controlled_Boiler.PID.u_m, pump_simple_controlled_Boiler.PID.y, pump_simple_controlled_Boiler.PID.controlError, pump_simple_controlled_Boiler.PID.addP.y, pump_simple_controlled_Boiler.PID.gainPID.u, pump_simple_controlled_Boiler.PID.gainPID.y, pump_simple_controlled_Boiler.PID.I.u, pump_simple_controlled_Boiler.PID.addI.u3, pump_simple_controlled_Boiler.PID.addSat.y, MixingVolume.'ports[1]'.h_outflow, MixingVolume.T, MixingVolume.dynBal.medium.T, MixingVolume.dynBal.medium.u, MixingVolume.dynBal.medium.T_degC, MixingVolume.dynBal.Hb_flow, MixingVolume.dynBal.'ports_H_flow[1]', MixingVolume.dynBal.'ports_H_flow[2]', MixingVolume.dynBal.'ports_H_flow[3]'} = fmi_Functions.fmiGetRealwf(fmi, {637534946, 637534947, 637534954, 369099504, 637534974, 637534993, 637535068, 369099566, 369099568, 905970486, 637535034, 637535037, 637535038, 637535058, 637535059, 637535066, 905970529, 436207621, 369099628, 436207617, 369099643, 905970579, 369099743, 369099698, 369099700, 905970618, 637535167, 637535170, 637535171, 369099726, 905970649, 369099751, 369099756, 369099762, 369099763, 369099767, 369099768, 905970681, 369099788, 369099793, 369099794, 637535266, 637535271, 637535272, 369099837, 436207619, 369099852, 905970788, 369099952, 369099907, 369099909, 905970827, 637535376, 637535379, 637535380, 369099935, 905970858, 369099960, 369099965, 369099971, 369099972, 369099976, 369099977, 905970890, 369099997, 369100002, 369100003, 637535475, 637535480, 637535481, 369100065, 905970980, 369100105, 369100107, 905971025, 587202573, 637535576, 637535577, 637535578}, if initial() then myTimeStart else myTime);
//alias Declarations
  cHP.prePow.port.Q_flow = cHP.vol.heaFloSen.port_b.Q_flow;
  watertank_warm.'vol[1]'.U = watertank_warm.'vol[1]'.dynBal.U;
  watertank_warm.'vol[1]'.dynBal.UOut = watertank_warm.'vol[1]'.dynBal.U;
  sum_gas.y = gas_power_consumption;
  sum_elec.y = electric_power_consumption;
  watertank_warm.'vol[2]'.U = watertank_warm.'vol[2]'.dynBal.U;
  watertank_warm.'vol[2]'.dynBal.UOut = watertank_warm.'vol[2]'.dynBal.U;
  condensingBoiler.volEva.U = condensingBoiler.volEva.dynBal.U;
  condensingBoiler.volEva.dynBal.UOut = condensingBoiler.volEva.dynBal.U;
  cHP.vol.preTem.port.Q_flow = cHP.Q_s;
  cHP.vol.heaFloSen.Q_flow = cHP.Q_s;
  cHP.vol.heaFloSen.port_a.Q_flow = cHP.Q_s;
  cHP.vol.heatPort.Q_flow = cHP.Q_s;
  cHP.vol.dynBal.Q_flow = cHP.Q_s;
  cHP.prePow.Q_flow = cHP.Q_s;
  cHP.vol.U = cHP.vol.dynBal.U;
  cHP.vol.dynBal.UOut = cHP.vol.dynBal.U;
  pipe_simple_chp.'vol[1]'.U = pipe_simple_chp.'vol[1]'.dynBal.U;
  pipe_simple_chp.'vol[1]'.dynBal.UOut = pipe_simple_chp.'vol[1]'.dynBal.U;
  pipe_simple_boiler.'vol[1]'.U = pipe_simple_boiler.'vol[1]'.dynBal.U;
  pipe_simple_boiler.'vol[1]'.dynBal.UOut = pipe_simple_boiler.'vol[1]'.dynBal.U;
  pump_simple_controlled_cHP.vol.U = pump_simple_controlled_cHP.vol.dynBal.U;
  pump_simple_controlled_cHP.vol.dynBal.UOut = pump_simple_controlled_cHP.vol.dynBal.U;
  pump_simple_controlled_cHP.PID.addPID.u3 = pump_simple_controlled_cHP.PID.I.y;
  pump_simple_controlled_Boiler.vol.U = pump_simple_controlled_Boiler.vol.dynBal.U;
  pump_simple_controlled_Boiler.vol.dynBal.UOut = pump_simple_controlled_Boiler.vol.dynBal.U;
  pump_simple_controlled_Boiler.PID.addPID.u3 = pump_simple_controlled_Boiler.PID.I.y;
  MixingVolume.U = MixingVolume.dynBal.U;
  MixingVolume.dynBal.UOut = MixingVolume.dynBal.U;
  immersionHeater.prescribedHeatFlow.port.Q_flow = immersionHeater.Q_flow_s.Q_flow;
  immersionHeater.P_el = immersionHeater.prescribedHeatFlow.Q_flow;
  immersionHeater.gain.y = immersionHeater.prescribedHeatFlow.Q_flow;
  sum_elec.'u[3]' = immersionHeater.prescribedHeatFlow.Q_flow;
  immersionHeater.nStepsLimiter.y = immersionHeater.gain.u;
  immersionHeater.s_u = immersionHeater.gain.u;
  condensingBoiler.m_flow = condensingBoiler.port_a.m_flow;
  condensingBoiler.volEva.'ports[1]'.m_flow = condensingBoiler.port_a.m_flow;
  condensingBoiler.volEva.dynBal.'ports[1]'.m_flow = condensingBoiler.port_a.m_flow;
  pipe_simple_boiler.port_a.m_flow = condensingBoiler.port_a.m_flow;
  pipe_simple_boiler.'vol[1]'.'ports[1]'.m_flow = condensingBoiler.port_a.m_flow;
  pipe_simple_boiler.'vol[1]'.dynBal.'ports[1]'.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.port_a.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.vol.'ports[1]'.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.vol.dynBal.'ports[1]'.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.preSou.port_a.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.preSou.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.preSou.m_flow_in = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.preSou.m_flow_internal = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.senMasFlo.port_a.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.senMasFlo.m_flow = condensingBoiler.port_a.m_flow;
  pump_simple_controlled_Boiler.m_flow_small_limiter.y = condensingBoiler.port_a.m_flow;
  MixingVolume.'ports[2]'.m_flow = condensingBoiler.port_a.m_flow;
  MixingVolume.dynBal.'ports[2]'.m_flow = condensingBoiler.port_a.m_flow;
  condensingBoiler.volEva.'ports[2]'.m_flow = condensingBoiler.port_b.m_flow;
  condensingBoiler.volEva.dynBal.'ports[2]'.m_flow = condensingBoiler.port_b.m_flow;
  pipe_simple_boiler.port_b.m_flow = condensingBoiler.port_b.m_flow;
  pipe_simple_boiler.'vol[1]'.'ports[2]'.m_flow = condensingBoiler.port_b.m_flow;
  pipe_simple_boiler.'vol[1]'.dynBal.'ports[2]'.m_flow = condensingBoiler.port_b.m_flow;
  pump_simple_controlled_Boiler.port_b.m_flow = condensingBoiler.port_b.m_flow;
  pump_simple_controlled_Boiler.vol.'ports[2]'.m_flow = condensingBoiler.port_b.m_flow;
  pump_simple_controlled_Boiler.vol.dynBal.'ports[2]'.m_flow = condensingBoiler.port_b.m_flow;
  pump_simple_controlled_Boiler.preSou.port_b.m_flow = condensingBoiler.port_b.m_flow;
  pump_simple_controlled_Boiler.senMasFlo.port_b.m_flow = condensingBoiler.port_b.m_flow;
  condensingBoiler.volEva.'ports[1]'.h_outflow = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.'ports[2]'.h_outflow = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.hOut_internal = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.dynBal.hOut = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.dynBal.'ports[1]'.h_outflow = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.dynBal.'ports[2]'.h_outflow = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.dynBal.medium.h = condensingBoiler.port_b.h_outflow;
  condensingBoiler.volEva.preTem.port.Q_flow = condensingBoiler.Q_s;
  condensingBoiler.volEva.heaFloSen.Q_flow = condensingBoiler.Q_s;
  condensingBoiler.volEva.heaFloSen.port_a.Q_flow = condensingBoiler.Q_s;
  condensingBoiler.volEva.heatPort.Q_flow = condensingBoiler.Q_s;
  condensingBoiler.volEva.dynBal.Q_flow = condensingBoiler.Q_s;
  condensingBoiler.prePow.Q_flow = condensingBoiler.Q_s;
  condensingBoiler.K2degC.Celsius = condensingBoiler.tableEfficiency.u;
  condensingBoiler.K2degC.Kelvin = condensingBoiler.temperature.T;
  condensingBoiler.volEva.dynBal.medium.state.T = condensingBoiler.volEva.dynBal.medium.T;
  sum_elec.'u[2]' = condensingBoiler.P_el;
  sum_gas.'u[2]' = condensingBoiler.P_gs;
  condensingBoiler.prePow.port.Q_flow = condensingBoiler.volEva.heaFloSen.port_b.Q_flow;
  reverse_P_el.y = sum_elec.'u[1]';
  pump_simple_controlled_cHP.P_el = sum_elec.'u[5]';
  pump_simple_controlled_cHP.vol.preTem.port.Q_flow = sum_elec.'u[5]';
  pump_simple_controlled_cHP.vol.heaFloSen.Q_flow = sum_elec.'u[5]';
  pump_simple_controlled_cHP.vol.heaFloSen.port_a.Q_flow = sum_elec.'u[5]';
  pump_simple_controlled_cHP.vol.heatPort.Q_flow = sum_elec.'u[5]';
  pump_simple_controlled_cHP.vol.dynBal.Q_flow = sum_elec.'u[5]';
  pump_simple_controlled_cHP.prePow.Q_flow = sum_elec.'u[5]';
  pump_simple_controlled_cHP.gainMassFlow1.y = sum_elec.'u[5]';
  pump_simple_controlled_Boiler.P_el = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.vol.preTem.port.Q_flow = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.vol.heaFloSen.Q_flow = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.vol.heaFloSen.port_a.Q_flow = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.vol.heatPort.Q_flow = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.vol.dynBal.Q_flow = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.prePow.Q_flow = sum_elec.'u[6]';
  pump_simple_controlled_Boiler.gainMassFlow1.y = sum_elec.'u[6]';
  cHP.P_gs = sum_gas.'u[1]';
  cHP.m_flow = cHP.port_a.m_flow;
  cHP.vol.'ports[1]'.m_flow = cHP.port_a.m_flow;
  cHP.vol.dynBal.'ports[1]'.m_flow = cHP.port_a.m_flow;
  pipe_simple_chp.port_a.m_flow = cHP.port_a.m_flow;
  pipe_simple_chp.'vol[1]'.'ports[1]'.m_flow = cHP.port_a.m_flow;
  pipe_simple_chp.'vol[1]'.dynBal.'ports[1]'.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.port_a.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.vol.'ports[1]'.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.vol.dynBal.'ports[1]'.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.preSou.port_a.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.preSou.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.preSou.m_flow_in = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.preSou.m_flow_internal = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.senMasFlo.port_a.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.senMasFlo.m_flow = cHP.port_a.m_flow;
  pump_simple_controlled_cHP.m_flow_small_limiter.y = cHP.port_a.m_flow;
  MixingVolume.'ports[1]'.m_flow = cHP.port_a.m_flow;
  MixingVolume.dynBal.'ports[1]'.m_flow = cHP.port_a.m_flow;
  cHP.vol.'ports[2]'.m_flow = cHP.port_b.m_flow;
  cHP.vol.dynBal.'ports[2]'.m_flow = cHP.port_b.m_flow;
  pipe_simple_chp.port_b.m_flow = cHP.port_b.m_flow;
  pipe_simple_chp.'vol[1]'.'ports[2]'.m_flow = cHP.port_b.m_flow;
  pipe_simple_chp.'vol[1]'.dynBal.'ports[2]'.m_flow = cHP.port_b.m_flow;
  pump_simple_controlled_cHP.port_b.m_flow = cHP.port_b.m_flow;
  pump_simple_controlled_cHP.vol.'ports[2]'.m_flow = cHP.port_b.m_flow;
  pump_simple_controlled_cHP.vol.dynBal.'ports[2]'.m_flow = cHP.port_b.m_flow;
  pump_simple_controlled_cHP.preSou.port_b.m_flow = cHP.port_b.m_flow;
  pump_simple_controlled_cHP.senMasFlo.port_b.m_flow = cHP.port_b.m_flow;
  cHP.vol.'ports[1]'.h_outflow = cHP.port_b.h_outflow;
  cHP.vol.'ports[2]'.h_outflow = cHP.port_b.h_outflow;
  cHP.vol.hOut_internal = cHP.port_b.h_outflow;
  cHP.vol.dynBal.hOut = cHP.port_b.h_outflow;
  cHP.vol.dynBal.'ports[1]'.h_outflow = cHP.port_b.h_outflow;
  cHP.vol.dynBal.'ports[2]'.h_outflow = cHP.port_b.h_outflow;
  cHP.vol.dynBal.medium.h = cHP.port_b.h_outflow;
  cHP.K2degC.Kelvin = cHP.temperature.T;
  cHP.vol.dynBal.medium.state.T = cHP.vol.dynBal.medium.T;
  reverse_P_el.u = cHP.P_el;
  cHP.zeroLimiter1.y = cHP.Tableefficency_P_th.u1;
  cHP.Tableefficency_P_el.u = cHP.Tableefficency_P_th.u1;
  cHP.Tableefficency_P_gs.u = cHP.Tableefficency_P_th.u1;
  pipe_simple_chp.port_b.h_outflow = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.'ports[1]'.h_outflow = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.'ports[2]'.h_outflow = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.hOut_internal = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.dynBal.hOut = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.dynBal.'ports[1]'.h_outflow = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.dynBal.'ports[2]'.h_outflow = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.dynBal.medium.h = pipe_simple_chp.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.dynBal.medium.state.T = pipe_simple_chp.'vol[1]'.dynBal.medium.T;
  pipe_simple_boiler.port_b.h_outflow = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.'ports[1]'.h_outflow = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.'ports[2]'.h_outflow = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.hOut_internal = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.dynBal.hOut = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.dynBal.'ports[1]'.h_outflow = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.dynBal.'ports[2]'.h_outflow = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.dynBal.medium.h = pipe_simple_boiler.port_a.h_outflow;
  pipe_simple_boiler.'vol[1]'.dynBal.medium.state.T = pipe_simple_boiler.'vol[1]'.dynBal.medium.T;
  pump_simple_controlled_cHP.port_b.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.'ports[1]'.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.'ports[2]'.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.hOut_internal = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.dynBal.hOut = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.dynBal.'ports[1]'.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.dynBal.'ports[2]'.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.vol.dynBal.medium.h = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.preSou.port_b.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.senMasFlo.port_b.h_outflow = pump_simple_controlled_cHP.port_a.h_outflow;
  pump_simple_controlled_cHP.gainMassFlow.y = pump_simple_controlled_cHP.y_actual;
  pump_simple_controlled_cHP.m_flow_small_limiter.u = pump_simple_controlled_cHP.y_actual;
  pump_simple_controlled_cHP.vol.dynBal.medium.state.T = pump_simple_controlled_cHP.vol.dynBal.medium.T;
  pump_simple_controlled_cHP.zeroLimiter.y = pump_simple_controlled_cHP.gainMassFlow.u;
  pump_simple_controlled_cHP.powerN.u = pump_simple_controlled_cHP.gainMassFlow.u;
  pump_simple_controlled_cHP.prePow.port.Q_flow = pump_simple_controlled_cHP.vol.heaFloSen.port_b.Q_flow;
  pump_simple_controlled_cHP.powerN.y = pump_simple_controlled_cHP.gainMassFlow1.u;
  pump_simple_controlled_cHP.switch1.y = pump_simple_controlled_cHP.zeroLimiter.u;
  pump_simple_controlled_cHP.add.u2 = pump_simple_controlled_cHP.T_flow;
  Temp_before_cHP.T = pump_simple_controlled_cHP.T_flow;
  pump_simple_controlled_cHP.add.u1 = pump_simple_controlled_cHP.T_return;
  Temp_after_cHP.T = pump_simple_controlled_cHP.T_return;
  pump_simple_controlled_cHP.PID.addP.u2 = pump_simple_controlled_cHP.PID.u_m;
  pump_simple_controlled_cHP.PID.addI.u2 = pump_simple_controlled_cHP.PID.u_m;
  pump_simple_controlled_cHP.add.y = pump_simple_controlled_cHP.PID.u_m;
  pump_simple_controlled_cHP.PID.limiter.y = pump_simple_controlled_cHP.PID.y;
  pump_simple_controlled_cHP.PID.addSat.u1 = pump_simple_controlled_cHP.PID.y;
  pump_simple_controlled_cHP.switch1.u1 = pump_simple_controlled_cHP.PID.y;
  pump_simple_controlled_cHP.PID.P.u = pump_simple_controlled_cHP.PID.addP.y;
  pump_simple_controlled_cHP.PID.P.y = pump_simple_controlled_cHP.PID.addP.y;
  pump_simple_controlled_cHP.PID.addPID.u1 = pump_simple_controlled_cHP.PID.addP.y;
  pump_simple_controlled_cHP.PID.addPID.y = pump_simple_controlled_cHP.PID.gainPID.u;
  pump_simple_controlled_cHP.PID.limiter.u = pump_simple_controlled_cHP.PID.gainPID.y;
  pump_simple_controlled_cHP.PID.addSat.u2 = pump_simple_controlled_cHP.PID.gainPID.y;
  pump_simple_controlled_Boiler.port_b.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.'ports[1]'.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.'ports[2]'.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.hOut_internal = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.dynBal.hOut = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.dynBal.'ports[1]'.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.dynBal.'ports[2]'.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.vol.dynBal.medium.h = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.preSou.port_b.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.senMasFlo.port_b.h_outflow = pump_simple_controlled_Boiler.port_a.h_outflow;
  pump_simple_controlled_Boiler.gainMassFlow.y = pump_simple_controlled_Boiler.y_actual;
  pump_simple_controlled_Boiler.m_flow_small_limiter.u = pump_simple_controlled_Boiler.y_actual;
  pump_simple_controlled_Boiler.vol.dynBal.medium.state.T = pump_simple_controlled_Boiler.vol.dynBal.medium.T;
  pump_simple_controlled_Boiler.zeroLimiter.y = pump_simple_controlled_Boiler.gainMassFlow.u;
  pump_simple_controlled_Boiler.powerN.u = pump_simple_controlled_Boiler.gainMassFlow.u;
  pump_simple_controlled_Boiler.prePow.port.Q_flow = pump_simple_controlled_Boiler.vol.heaFloSen.port_b.Q_flow;
  pump_simple_controlled_Boiler.powerN.y = pump_simple_controlled_Boiler.gainMassFlow1.u;
  pump_simple_controlled_Boiler.switch1.y = pump_simple_controlled_Boiler.zeroLimiter.u;
  pump_simple_controlled_Boiler.add.u2 = pump_simple_controlled_Boiler.T_flow;
  Temp_before_Boiler.T = pump_simple_controlled_Boiler.T_flow;
  pump_simple_controlled_Boiler.add.u1 = pump_simple_controlled_Boiler.T_return;
  Temp_after_Boiler.T = pump_simple_controlled_Boiler.T_return;
  pump_simple_controlled_Boiler.PID.addP.u2 = pump_simple_controlled_Boiler.PID.u_m;
  pump_simple_controlled_Boiler.PID.addI.u2 = pump_simple_controlled_Boiler.PID.u_m;
  pump_simple_controlled_Boiler.add.y = pump_simple_controlled_Boiler.PID.u_m;
  pump_simple_controlled_Boiler.PID.limiter.y = pump_simple_controlled_Boiler.PID.y;
  pump_simple_controlled_Boiler.PID.addSat.u1 = pump_simple_controlled_Boiler.PID.y;
  pump_simple_controlled_Boiler.switch1.u1 = pump_simple_controlled_Boiler.PID.y;
  pump_simple_controlled_Boiler.PID.P.u = pump_simple_controlled_Boiler.PID.addP.y;
  pump_simple_controlled_Boiler.PID.P.y = pump_simple_controlled_Boiler.PID.addP.y;
  pump_simple_controlled_Boiler.PID.addPID.u1 = pump_simple_controlled_Boiler.PID.addP.y;
  pump_simple_controlled_Boiler.PID.addPID.y = pump_simple_controlled_Boiler.PID.gainPID.u;
  pump_simple_controlled_Boiler.PID.limiter.u = pump_simple_controlled_Boiler.PID.gainPID.y;
  pump_simple_controlled_Boiler.PID.addSat.u2 = pump_simple_controlled_Boiler.PID.gainPID.y;
  MixingVolume.'ports[2]'.h_outflow = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.'ports[3]'.h_outflow = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.hOut_internal = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.dynBal.hOut = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.dynBal.'ports[1]'.h_outflow = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.dynBal.'ports[2]'.h_outflow = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.dynBal.'ports[3]'.h_outflow = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.dynBal.medium.h = MixingVolume.'ports[1]'.h_outflow;
  MixingVolume.dynBal.medium.state.T = MixingVolume.dynBal.medium.T;
  cHP.zeroLimiter1.u = cHP.u;
  pump_simple_controlled_cHP.greaterThreshold.u = pump_simple_controlled_cHP.u;
  pump_simple_controlled_Boiler.greaterThreshold.u = pump_simple_controlled_Boiler.u;
  immersionHeater.nStepsLimiter.u = immersionHeater.u;
  gain.u = prescribedHeatFlow.port.Q_flow;
  watertank_warm.m_flow = watertank_warm.port_a.m_flow;
  watertank_warm.'vol[1]'.'ports[1]'.m_flow = watertank_warm.port_a.m_flow;
  watertank_warm.'vol[1]'.dynBal.'ports[1]'.m_flow = watertank_warm.port_a.m_flow;
  watertank_warm.'vol[2]'.'ports[1]'.m_flow = watertank_warm.port_a.m_flow;
  watertank_warm.'vol[2]'.dynBal.'ports[1]'.m_flow = watertank_warm.port_a.m_flow;
  watertank_warm.'vol[1]'.'ports[1]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.'ports[2]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.'ports[3]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.hOut_internal = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.dynBal.hOut = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.dynBal.'ports[1]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.dynBal.'ports[2]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.dynBal.'ports[3]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[1]'.dynBal.medium.h = watertank_warm.port_a.h_outflow;
  watertank_warm.'fluPorVol[1]'.h_outflow = watertank_warm.port_a.h_outflow;
  watertank_warm.'vol[2]'.'ports[1]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.'ports[2]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.'ports[3]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.hOut_internal = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.dynBal.hOut = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.dynBal.'ports[1]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.dynBal.'ports[2]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.dynBal.'ports[3]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.'vol[2]'.dynBal.medium.h = watertank_warm.port_b.h_outflow;
  watertank_warm.'fluPorVol[2]'.h_outflow = watertank_warm.port_b.h_outflow;
  watertank_warm.heaPorTop.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.preTem.port.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.preTem.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.portT.y = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.heaFloSen.port_a.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.heaFloSen.port_b.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'vol[1]'.heatPort.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.buo.'heatPort[1]'.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'conFlu[1]'.port_a.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.'conWal[1]'.port_a.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.conTop.port_a.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.conTop.port_b.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.heaFloTop.port_a.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.heaFloTop.port_b.T = watertank_warm.'heaPorVol[1]'.T;
  immersionHeater.Q_flow_s.T = watertank_warm.'heaPorVol[1]'.T;
  immersionHeater.prescribedHeatFlow.port.T = watertank_warm.'heaPorVol[1]'.T;
  prescribedHeatFlow.port.T = watertank_warm.'heaPorVol[1]'.T;
  watertank_warm.heaPorBot.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.preTem.port.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.preTem.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.portT.y = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.heaFloSen.port_a.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.heaFloSen.port_b.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'vol[2]'.heatPort.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.buo.'heatPort[2]'.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'conFlu[1]'.port_b.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'conWal[2]'.port_a.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.conBot.port_a.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.conBot.port_b.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.heaFloBot.port_a.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.heaFloBot.port_b.T = watertank_warm.'heaPorVol[2]'.T;
  watertank_warm.'conWal[1]'.port_b.T = watertank_warm.heaPorSid.T;
  watertank_warm.'conWal[2]'.port_b.T = watertank_warm.heaPorSid.T;
  watertank_warm.'heaFloSid[1]'.port_a.T = watertank_warm.heaPorSid.T;
  watertank_warm.'heaFloSid[1]'.port_b.T = watertank_warm.heaPorSid.T;
  watertank_warm.'heaFloSid[2]'.port_a.T = watertank_warm.heaPorSid.T;
  watertank_warm.'heaFloSid[2]'.port_b.T = watertank_warm.heaPorSid.T;
  watertank_warm.theCol.'port_a[1]'.T = watertank_warm.heaPorSid.T;
  watertank_warm.theCol.'port_a[2]'.T = watertank_warm.heaPorSid.T;
  watertank_warm.theCol.port_b.T = watertank_warm.heaPorSid.T;
  watertank_warm.'vol[1]'.heaFloSen.Q_flow = watertank_warm.'vol[1]'.preTem.port.Q_flow;
  watertank_warm.'vol[1]'.heaFloSen.port_a.Q_flow = watertank_warm.'vol[1]'.preTem.port.Q_flow;
  watertank_warm.'vol[1]'.heatPort.Q_flow = watertank_warm.'vol[1]'.preTem.port.Q_flow;
  watertank_warm.'vol[1]'.dynBal.Q_flow = watertank_warm.'vol[1]'.preTem.port.Q_flow;
  watertank_warm.'vol[1]'.dynBal.medium.state.T = watertank_warm.'vol[1]'.dynBal.medium.T;
  watertank_warm.'vol[2]'.heaFloSen.Q_flow = watertank_warm.'vol[2]'.preTem.port.Q_flow;
  watertank_warm.'vol[2]'.heaFloSen.port_a.Q_flow = watertank_warm.'vol[2]'.preTem.port.Q_flow;
  watertank_warm.'vol[2]'.heatPort.Q_flow = watertank_warm.'vol[2]'.preTem.port.Q_flow;
  watertank_warm.'vol[2]'.dynBal.Q_flow = watertank_warm.'vol[2]'.preTem.port.Q_flow;
  watertank_warm.'vol[2]'.dynBal.medium.state.T = watertank_warm.'vol[2]'.dynBal.medium.T;
  watertank_warm.buo.'Q_flow[1]' = watertank_warm.buo.'heatPort[2]'.Q_flow;
  watertank_warm.'conFlu[1]'.port_a.Q_flow = watertank_warm.'conFlu[1]'.Q_flow;
  watertank_warm.'conWal[2]'.Q_flow = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.'conWal[2]'.port_a.Q_flow = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.'heaFloSid[1]'.port_b.Q_flow = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.'heaFloSid[2]'.Q_flow = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.'heaFloSid[2]'.port_a.Q_flow = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.mul.'u2[2]' = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.mul.'y[3]' = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.sum1.'u[3]' = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.theCol.'port_a[2]'.Q_flow = watertank_warm.'conWal[1]'.port_b.Q_flow;
  watertank_warm.'conWal[1]'.port_a.Q_flow = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.'conWal[2]'.port_b.Q_flow = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.'heaFloSid[1]'.Q_flow = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.'heaFloSid[1]'.port_a.Q_flow = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.'heaFloSid[2]'.port_b.Q_flow = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.mul.'u2[1]' = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.mul.'y[2]' = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.sum1.'u[2]' = watertank_warm.'conWal[1]'.Q_flow;
  watertank_warm.theCol.'port_a[1]'.Q_flow = watertank_warm.'conWal[1]'.Q_flow;
  cHP.Tableefficency_P_th.u2 = cHP.K2degC.Celsius;
  massflow_from_watertank_warm.m_flow = massflow_from_watertank_warm.port_a.m_flow;
  massflow_from_watertank_warm.port_b.h_outflow = massflow_from_watertank_warm.port_a.h_outflow;
  pipe_simple_chp.'vol[1]'.heaFloSen.port_b.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.fixedTemperature.port.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.'conWall[1]'.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.'conWall[1]'.port_a.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.theCol.'port_a[1]'.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.senQFlowLoss.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.senQFlowLoss.port_a.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.'conIns[1]'.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.'conIns[1]'.port_a.Q_flow = pipe_simple_chp.Q_flow_loss;
  pipe_simple_chp.'vol[1]'.preTem.port.T = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'vol[1]'.preTem.T = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'vol[1]'.portT.y = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'vol[1]'.heaFloSen.port_a.T = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'vol[1]'.heaFloSen.port_b.T = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'vol[1]'.heatPort.T = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'conWall[1]'.port_a.T = pipe_simple_chp.'vol[1]'.T;
  pipe_simple_chp.'conIns[1]'.port_a.T = pipe_simple_chp.'conWall[1]'.port_b.T;
  pipe_simple_chp.'vol[1]'.heaFloSen.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.'vol[1]'.heaFloSen.port_a.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.'vol[1]'.heatPort.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.'vol[1]'.dynBal.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.'conWall[1]'.port_b.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.theCol.port_b.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.senQFlowLoss.port_b.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_chp.'conIns[1]'.port_b.Q_flow = pipe_simple_chp.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.'vol[1]'.heaFloSen.port_b.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.fixedTemperature.port.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.'conWall[1]'.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.'conWall[1]'.port_a.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.theCol.'port_a[1]'.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.senQFlowLoss.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.senQFlowLoss.port_a.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.'conIns[1]'.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.'conIns[1]'.port_a.Q_flow = pipe_simple_boiler.Q_flow_loss;
  pipe_simple_boiler.'vol[1]'.preTem.port.T = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'vol[1]'.preTem.T = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'vol[1]'.portT.y = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'vol[1]'.heaFloSen.port_a.T = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'vol[1]'.heaFloSen.port_b.T = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'vol[1]'.heatPort.T = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'conWall[1]'.port_a.T = pipe_simple_boiler.'vol[1]'.T;
  pipe_simple_boiler.'conIns[1]'.port_a.T = pipe_simple_boiler.'conWall[1]'.port_b.T;
  pipe_simple_boiler.'vol[1]'.heaFloSen.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.'vol[1]'.heaFloSen.port_a.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.'vol[1]'.heatPort.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.'vol[1]'.dynBal.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.'conWall[1]'.port_b.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.theCol.port_b.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.senQFlowLoss.port_b.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pipe_simple_boiler.'conIns[1]'.port_b.Q_flow = pipe_simple_boiler.'vol[1]'.preTem.port.Q_flow;
  pump_simple_controlled_cHP.PID.addI.y = pump_simple_controlled_cHP.PID.I.u;
  pump_simple_controlled_cHP.PID.gainTrack.y = pump_simple_controlled_cHP.PID.addI.u3;
  pump_simple_controlled_cHP.PID.gainTrack.u = pump_simple_controlled_cHP.PID.addSat.y;
  pump_simple_controlled_Boiler.PID.addI.y = pump_simple_controlled_Boiler.PID.I.u;
  pump_simple_controlled_Boiler.PID.gainTrack.y = pump_simple_controlled_Boiler.PID.addI.u3;
  pump_simple_controlled_Boiler.PID.gainTrack.u = pump_simple_controlled_Boiler.PID.addSat.y;
  watertank_warm.'vol[1]'.'ports[2]'.m_flow = watertank_warm.port_b.m_flow;
  watertank_warm.'vol[1]'.dynBal.'ports[2]'.m_flow = watertank_warm.port_b.m_flow;
  watertank_warm.'vol[2]'.'ports[2]'.m_flow = watertank_warm.port_b.m_flow;
  watertank_warm.'vol[2]'.dynBal.'ports[2]'.m_flow = watertank_warm.port_b.m_flow;
  MixingVolume.'ports[3]'.m_flow = watertank_warm.port_b.m_flow;
  MixingVolume.dynBal.'ports[3]'.m_flow = watertank_warm.port_b.m_flow;
  condensingBoiler.volEva.preTem.port.T = condensingBoiler.volEva.T;
  condensingBoiler.volEva.preTem.T = condensingBoiler.volEva.T;
  condensingBoiler.volEva.portT.y = condensingBoiler.volEva.T;
  condensingBoiler.volEva.heaFloSen.port_a.T = condensingBoiler.volEva.T;
  condensingBoiler.volEva.heaFloSen.port_b.T = condensingBoiler.volEva.T;
  condensingBoiler.volEva.heatPort.T = condensingBoiler.volEva.T;
  condensingBoiler.prePow.port.T = condensingBoiler.volEva.T;
  cHP.vol.preTem.port.T = cHP.vol.T;
  cHP.vol.preTem.T = cHP.vol.T;
  cHP.vol.portT.y = cHP.vol.T;
  cHP.vol.heaFloSen.port_a.T = cHP.vol.T;
  cHP.vol.heaFloSen.port_b.T = cHP.vol.T;
  cHP.vol.heatPort.T = cHP.vol.T;
  cHP.prePow.port.T = cHP.vol.T;
  gain.y = prescribedHeatFlow.Q_flow;
  pump_simple_controlled_cHP.vol.preTem.port.T = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_cHP.vol.preTem.T = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_cHP.vol.portT.y = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_cHP.vol.heaFloSen.port_a.T = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_cHP.vol.heaFloSen.port_b.T = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_cHP.vol.heatPort.T = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_cHP.prePow.port.T = pump_simple_controlled_cHP.vol.T;
  pump_simple_controlled_Boiler.vol.preTem.port.T = pump_simple_controlled_Boiler.vol.T;
  pump_simple_controlled_Boiler.vol.preTem.T = pump_simple_controlled_Boiler.vol.T;
  pump_simple_controlled_Boiler.vol.portT.y = pump_simple_controlled_Boiler.vol.T;
  pump_simple_controlled_Boiler.vol.heaFloSen.port_a.T = pump_simple_controlled_Boiler.vol.T;
  pump_simple_controlled_Boiler.vol.heaFloSen.port_b.T = pump_simple_controlled_Boiler.vol.T;
  pump_simple_controlled_Boiler.vol.heatPort.T = pump_simple_controlled_Boiler.vol.T;
  pump_simple_controlled_Boiler.prePow.port.T = pump_simple_controlled_Boiler.vol.T;
  MixingVolume.preTem.port.T = MixingVolume.T;
  MixingVolume.preTem.T = MixingVolume.T;
  MixingVolume.portT.y = MixingVolume.T;
  MixingVolume.heaFloSen.port_a.T = MixingVolume.T;
  MixingVolume.heaFloSen.port_b.T = MixingVolume.T;
  MixingVolume.heatPort.T = MixingVolume.T;
  pump_simple_controlled_cHP.switch1.u2 = pump_simple_controlled_cHP.greaterThreshold.y;
  pump_simple_controlled_Boiler.switch1.u2 = pump_simple_controlled_Boiler.greaterThreshold.y;
  annotation (__Dymola_FMUImportVersion="Dymola 2019", experiment(StartTime=0.0, StopTime=3600.0, Tolerance=0.0001),
    Icon(graphics={
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 2.0 ME")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 2.0</li>
<li>modelName = ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B</li>
<li>generationTool = Dymola Version 2019 (64-bit), 2018-04-11</li>
<li>generationDateAndTime = 2018-11-22T16:46:45Z</li>
</ul>
<p><br><b>Model Exchange Attributes</b></p>
<ul>
<li>needsExecutionTool = false</li>
<li>completedIntegratorStepNotNeeded = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = false</li>
<li>canNotUseMemoryManagementFunctions = false</li>
<li>canGetAndSetFMUstate = true</li>
<li>canSerializeFMUstate = true</li>
<li>providesDirectionalDerivative = true</li>
</ul>
<p><br><b>Co-Simulation Attributes</b></p>
<ul>
<li>needsExecutionTool = false</li>
<li>canHandleVariableCommunicationStepSize = true</li>
<li>canInterpolateInputs = true</li>
<li>maxOutputDerivativeOrder = 1</li>
<li>canRunAsynchronuously = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = false</li>
<li>canNotUseMemoryManagementFunctions = false</li>
<li>canGetAndSetFMUstate = true</li>
<li>canSerializeFMUstate = true</li>
<li>providesDirectionalDerivative = true</li>
</ul>
</html>"));
end ETAFactoryLib_Applications_ConnectedSystems_EtaFactory_0partial_0B_fmu;
